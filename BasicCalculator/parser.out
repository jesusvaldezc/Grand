Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    LBRACK
    QMARKS
    RBRACK
    STRING
    UMINUS

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID primerCuad var_assign subrutinas rellenaCuad a END PROGRAM ID
Rule 2     primerCuad -> empty
Rule 3     rellenaCuad -> empty
Rule 4     type_definition -> INT_TYPE
Rule 5     type_definition -> FLOAT_TYPE
Rule 6     var_assign -> type_definition COLONS COLONS var_local var_dimensiones create_var_table var_assign
Rule 7     var_assign -> empty
Rule 8     var_dimensiones -> LARR constante_entero RARR
Rule 9     var_dimensiones -> LARR constante_entero COMMA constante_entero RARR
Rule 10    var_dimensiones -> empty
Rule 11    create_var_table -> empty
Rule 12    var_local -> ID COMMA var_local
Rule 13    var_local -> ID
Rule 14    subrutinas -> f_local
Rule 15    subrutinas -> empty
Rule 16    f_local -> SUBROUTINE idSub d crearCuadruploReturn END_SUBROUTINE f_local
Rule 17    f_local -> SUBROUTINE idSub d crearCuadruploReturn END_SUBROUTINE
Rule 18    idSub -> ID
Rule 19    crearCuadruploReturn -> empty
Rule 20    a -> BEGIN d END
Rule 21    d -> b
Rule 22    d -> b d
Rule 23    b -> variable_matrix_assign
Rule 24    b -> printing_variables
Rule 25    b -> if_expression
Rule 26    b -> do_loops
Rule 27    b -> call_subroutine
Rule 28    b -> reading_variables
Rule 29    b -> EXIT paso4DoExit
Rule 30    do_loops -> FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR
Rule 31    do_loops -> DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO
Rule 32    do_loops -> DO paso1DO LOOP d WHILE expression_logic END_DO paso2DO
Rule 33    do_loops -> LOOP paso1DoExit d END_LOOP paso2DoExit paso3DoExit
Rule 34    paso1FOR -> ID
Rule 35    paso2FOR -> empty
Rule 36    paso3FOR -> empty
Rule 37    paso4FOR -> empty
Rule 38    reading_variables -> READ idrepInput
Rule 39    idrepInput -> idInput
Rule 40    idrepInput -> idInput COMMA idrepInput
Rule 41    idInput -> ID
Rule 42    call_subroutine -> CALL ID
Rule 43    if_expression -> IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF
Rule 44    if_expression -> IF expression_logic paso1IF THEN if_expression_local paso3IF END_IF
Rule 45    if_expression_local -> d
Rule 46    if_expression_local -> empty
Rule 47    if_expression_local2 -> ELSIF expression_logic THEN if_expression_local if_expression_local2
Rule 48    if_expression_local2 -> empty
Rule 49    printing_variables -> PRINT Output
Rule 50    Output -> idOut
Rule 51    Output -> LPAREN StringOut RPAREN
Rule 52    StringOut -> empty
Rule 53    StringOut -> ID StringOut
Rule 54    StringOut -> constante_entero StringOut
Rule 55    StringOut -> constante_flotante StringOut
Rule 56    StringOut -> COLONS StringOut
Rule 57    StringOut -> COMMA StringOut
Rule 58    StringOut -> QUESTION StringOut
Rule 59    idOut -> ID
Rule 60    variable_matrix_assign -> ID ASSIGN expression_arith
Rule 61    variable_matrix_assign -> ID LPAREN expression_arith RPAREN ASSIGN expression_arith
Rule 62    variable_matrix_assign -> ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith
Rule 63    expression_arith -> expression_arith PLUS c
Rule 64    expression_arith -> expression_arith MINUS c
Rule 65    expression_arith -> c
Rule 66    c -> c MULTIPLY te
Rule 67    c -> c DIVIDE te
Rule 68    c -> te
Rule 69    te -> ID
Rule 70    te -> constante_entero
Rule 71    te -> constante_flotante
Rule 72    te -> ID LPAREN expression_arith RPAREN
Rule 73    te -> ID LPAREN expression_arith COMMA expression_arith RPAREN
Rule 74    te -> LPAREN expression_arith RPAREN
Rule 75    expression_logic -> expression_logic OR g
Rule 76    expression_logic -> g
Rule 77    g -> g AND ge
Rule 78    g -> ge
Rule 79    ge -> ID GT ID
Rule 80    ge -> ID LT ID
Rule 81    ge -> ID GE ID
Rule 82    ge -> ID LE ID
Rule 83    ge -> ID NE ID
Rule 84    ge -> ID EQUAL ID
Rule 85    ge -> LPAREN expression_logic RPAREN
Rule 86    paso1IF -> empty
Rule 87    paso2IF -> empty
Rule 88    paso3IF -> empty
Rule 89    constante_entero -> INT
Rule 90    constante_flotante -> FLOAT
Rule 91    paso1DO -> empty
Rule 92    paso2DO -> empty
Rule 93    paso1DoExit -> empty
Rule 94    paso2DoExit -> empty
Rule 95    paso3DoExit -> empty
Rule 96    paso4DoExit -> empty
Rule 97    empty -> <empty>

Terminals, with rules where they appear

AND                  : 77
ASSIGN               : 30 60 61 62
BEGIN                : 20
CALL                 : 42
COLONS               : 6 6 56
COMMA                : 9 12 30 31 31 40 57 62 73
COMMENT              : 
DIVIDE               : 67
DO                   : 30 31 32
ELSE                 : 43
ELSIF                : 47
END                  : 1 20
END_DO               : 31 32
END_FOR              : 30
END_IF               : 43 44
END_LOOP             : 33
END_SUBROUTINE       : 16 17
EQUAL                : 84
EXIT                 : 29
FLOAT                : 90
FLOAT_TYPE           : 5
FOR                  : 30
GE                   : 81
GT                   : 79
ID                   : 1 1 12 13 18 34 41 42 53 59 60 61 62 69 72 73 79 79 80 80 81 81 82 82 83 83 84 84
IF                   : 43 44
INT                  : 89
INT_TYPE             : 4
LARR                 : 8 9
LBRACK               : 
LE                   : 82
LOOP                 : 32 33
LPAREN               : 51 61 62 72 73 74 85
LT                   : 80
MINUS                : 64
MULTIPLY             : 66
NE                   : 83
OR                   : 75
PLUS                 : 63
PRINT                : 49
PROGRAM              : 1 1
QMARKS               : 
QUESTION             : 58
RARR                 : 8 9
RBRACK               : 
READ                 : 38
RPAREN               : 51 61 62 72 73 74 85
STRING               : 
SUBROUTINE           : 16 17
THEN                 : 43 44 47
UMINUS               : 
WHILE                : 32
error                : 

Nonterminals, with rules where they appear

Output               : 49
StringOut            : 51 53 54 55 56 57 58
a                    : 1
b                    : 21 22
c                    : 63 64 65 66 67
call_subroutine      : 27
constante_entero     : 8 9 9 31 31 54 70
constante_flotante   : 55 71
crearCuadruploReturn : 16 17
create_var_table     : 6
d                    : 16 17 20 22 30 31 32 33 45
do_loops             : 26
empty                : 2 3 7 10 11 15 19 35 36 37 46 48 52 86 87 88 91 92 93 94 95 96
expression_arith     : 30 30 60 61 61 62 62 62 63 64 72 73 73 74
expression_logic     : 32 43 44 47 75 85
f_local              : 14 16
g                    : 75 76 77
ge                   : 77 78
idInput              : 39 40
idOut                : 50
idSub                : 16 17
idrepInput           : 38 40
if_expression        : 25
if_expression_local  : 43 43 44 47
if_expression_local2 : 43 47
paso1DO              : 32
paso1DoExit          : 33
paso1FOR             : 30
paso1IF              : 43 44
paso2DO              : 32
paso2DoExit          : 33
paso2FOR             : 30
paso2IF              : 43
paso3DoExit          : 33
paso3FOR             : 30
paso3IF              : 43 44
paso4DoExit          : 29
paso4FOR             : 30
primerCuad           : 1
printing_variables   : 24
program              : 0
reading_variables    : 28
rellenaCuad          : 1
subrutinas           : 1
te                   : 66 67 68
type_definition      : 6
var_assign           : 1 6
var_dimensiones      : 6
var_local            : 6 12
variable_matrix_assign : 23 31

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID primerCuad var_assign subrutinas rellenaCuad a END PROGRAM ID

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID primerCuad var_assign subrutinas rellenaCuad a END PROGRAM ID

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . primerCuad var_assign subrutinas rellenaCuad a END PROGRAM ID
    (2) primerCuad -> . empty
    (97) empty -> .

    INT_TYPE        reduce using rule 97 (empty -> .)
    FLOAT_TYPE      reduce using rule 97 (empty -> .)
    SUBROUTINE      reduce using rule 97 (empty -> .)
    BEGIN           reduce using rule 97 (empty -> .)

    primerCuad                     shift and go to state 4
    empty                          shift and go to state 5

state 4

    (1) program -> PROGRAM ID primerCuad . var_assign subrutinas rellenaCuad a END PROGRAM ID
    (6) var_assign -> . type_definition COLONS COLONS var_local var_dimensiones create_var_table var_assign
    (7) var_assign -> . empty
    (4) type_definition -> . INT_TYPE
    (5) type_definition -> . FLOAT_TYPE
    (97) empty -> .

    INT_TYPE        shift and go to state 9
    FLOAT_TYPE      shift and go to state 10
    SUBROUTINE      reduce using rule 97 (empty -> .)
    BEGIN           reduce using rule 97 (empty -> .)

    var_assign                     shift and go to state 6
    type_definition                shift and go to state 7
    empty                          shift and go to state 8

state 5

    (2) primerCuad -> empty .

    INT_TYPE        reduce using rule 2 (primerCuad -> empty .)
    FLOAT_TYPE      reduce using rule 2 (primerCuad -> empty .)
    SUBROUTINE      reduce using rule 2 (primerCuad -> empty .)
    BEGIN           reduce using rule 2 (primerCuad -> empty .)


state 6

    (1) program -> PROGRAM ID primerCuad var_assign . subrutinas rellenaCuad a END PROGRAM ID
    (14) subrutinas -> . f_local
    (15) subrutinas -> . empty
    (16) f_local -> . SUBROUTINE idSub d crearCuadruploReturn END_SUBROUTINE f_local
    (17) f_local -> . SUBROUTINE idSub d crearCuadruploReturn END_SUBROUTINE
    (97) empty -> .

    SUBROUTINE      shift and go to state 14
    BEGIN           reduce using rule 97 (empty -> .)

    subrutinas                     shift and go to state 11
    f_local                        shift and go to state 12
    empty                          shift and go to state 13

state 7

    (6) var_assign -> type_definition . COLONS COLONS var_local var_dimensiones create_var_table var_assign

    COLONS          shift and go to state 15


state 8

    (7) var_assign -> empty .

    SUBROUTINE      reduce using rule 7 (var_assign -> empty .)
    BEGIN           reduce using rule 7 (var_assign -> empty .)


state 9

    (4) type_definition -> INT_TYPE .

    COLONS          reduce using rule 4 (type_definition -> INT_TYPE .)


state 10

    (5) type_definition -> FLOAT_TYPE .

    COLONS          reduce using rule 5 (type_definition -> FLOAT_TYPE .)


state 11

    (1) program -> PROGRAM ID primerCuad var_assign subrutinas . rellenaCuad a END PROGRAM ID
    (3) rellenaCuad -> . empty
    (97) empty -> .

    BEGIN           reduce using rule 97 (empty -> .)

    rellenaCuad                    shift and go to state 16
    empty                          shift and go to state 17

state 12

    (14) subrutinas -> f_local .

    BEGIN           reduce using rule 14 (subrutinas -> f_local .)


state 13

    (15) subrutinas -> empty .

    BEGIN           reduce using rule 15 (subrutinas -> empty .)


state 14

    (16) f_local -> SUBROUTINE . idSub d crearCuadruploReturn END_SUBROUTINE f_local
    (17) f_local -> SUBROUTINE . idSub d crearCuadruploReturn END_SUBROUTINE
    (18) idSub -> . ID

    ID              shift and go to state 19

    idSub                          shift and go to state 18

state 15

    (6) var_assign -> type_definition COLONS . COLONS var_local var_dimensiones create_var_table var_assign

    COLONS          shift and go to state 20


state 16

    (1) program -> PROGRAM ID primerCuad var_assign subrutinas rellenaCuad . a END PROGRAM ID
    (20) a -> . BEGIN d END

    BEGIN           shift and go to state 22

    a                              shift and go to state 21

state 17

    (3) rellenaCuad -> empty .

    BEGIN           reduce using rule 3 (rellenaCuad -> empty .)


state 18

    (16) f_local -> SUBROUTINE idSub . d crearCuadruploReturn END_SUBROUTINE f_local
    (17) f_local -> SUBROUTINE idSub . d crearCuadruploReturn END_SUBROUTINE
    (21) d -> . b
    (22) d -> . b d
    (23) b -> . variable_matrix_assign
    (24) b -> . printing_variables
    (25) b -> . if_expression
    (26) b -> . do_loops
    (27) b -> . call_subroutine
    (28) b -> . reading_variables
    (29) b -> . EXIT paso4DoExit
    (60) variable_matrix_assign -> . ID ASSIGN expression_arith
    (61) variable_matrix_assign -> . ID LPAREN expression_arith RPAREN ASSIGN expression_arith
    (62) variable_matrix_assign -> . ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith
    (49) printing_variables -> . PRINT Output
    (43) if_expression -> . IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF
    (44) if_expression -> . IF expression_logic paso1IF THEN if_expression_local paso3IF END_IF
    (30) do_loops -> . FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR
    (31) do_loops -> . DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO
    (32) do_loops -> . DO paso1DO LOOP d WHILE expression_logic END_DO paso2DO
    (33) do_loops -> . LOOP paso1DoExit d END_LOOP paso2DoExit paso3DoExit
    (42) call_subroutine -> . CALL ID
    (38) reading_variables -> . READ idrepInput

    EXIT            shift and go to state 31
    ID              shift and go to state 32
    PRINT           shift and go to state 33
    IF              shift and go to state 34
    FOR             shift and go to state 35
    DO              shift and go to state 36
    LOOP            shift and go to state 37
    CALL            shift and go to state 38
    READ            shift and go to state 39

    d                              shift and go to state 23
    b                              shift and go to state 24
    variable_matrix_assign         shift and go to state 25
    printing_variables             shift and go to state 26
    if_expression                  shift and go to state 27
    do_loops                       shift and go to state 28
    call_subroutine                shift and go to state 29
    reading_variables              shift and go to state 30

state 19

    (18) idSub -> ID .

    EXIT            reduce using rule 18 (idSub -> ID .)
    ID              reduce using rule 18 (idSub -> ID .)
    PRINT           reduce using rule 18 (idSub -> ID .)
    IF              reduce using rule 18 (idSub -> ID .)
    FOR             reduce using rule 18 (idSub -> ID .)
    DO              reduce using rule 18 (idSub -> ID .)
    LOOP            reduce using rule 18 (idSub -> ID .)
    CALL            reduce using rule 18 (idSub -> ID .)
    READ            reduce using rule 18 (idSub -> ID .)


state 20

    (6) var_assign -> type_definition COLONS COLONS . var_local var_dimensiones create_var_table var_assign
    (12) var_local -> . ID COMMA var_local
    (13) var_local -> . ID

    ID              shift and go to state 41

    var_local                      shift and go to state 40

state 21

    (1) program -> PROGRAM ID primerCuad var_assign subrutinas rellenaCuad a . END PROGRAM ID

    END             shift and go to state 42


state 22

    (20) a -> BEGIN . d END
    (21) d -> . b
    (22) d -> . b d
    (23) b -> . variable_matrix_assign
    (24) b -> . printing_variables
    (25) b -> . if_expression
    (26) b -> . do_loops
    (27) b -> . call_subroutine
    (28) b -> . reading_variables
    (29) b -> . EXIT paso4DoExit
    (60) variable_matrix_assign -> . ID ASSIGN expression_arith
    (61) variable_matrix_assign -> . ID LPAREN expression_arith RPAREN ASSIGN expression_arith
    (62) variable_matrix_assign -> . ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith
    (49) printing_variables -> . PRINT Output
    (43) if_expression -> . IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF
    (44) if_expression -> . IF expression_logic paso1IF THEN if_expression_local paso3IF END_IF
    (30) do_loops -> . FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR
    (31) do_loops -> . DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO
    (32) do_loops -> . DO paso1DO LOOP d WHILE expression_logic END_DO paso2DO
    (33) do_loops -> . LOOP paso1DoExit d END_LOOP paso2DoExit paso3DoExit
    (42) call_subroutine -> . CALL ID
    (38) reading_variables -> . READ idrepInput

    EXIT            shift and go to state 31
    ID              shift and go to state 32
    PRINT           shift and go to state 33
    IF              shift and go to state 34
    FOR             shift and go to state 35
    DO              shift and go to state 36
    LOOP            shift and go to state 37
    CALL            shift and go to state 38
    READ            shift and go to state 39

    d                              shift and go to state 43
    b                              shift and go to state 24
    variable_matrix_assign         shift and go to state 25
    printing_variables             shift and go to state 26
    if_expression                  shift and go to state 27
    do_loops                       shift and go to state 28
    call_subroutine                shift and go to state 29
    reading_variables              shift and go to state 30

state 23

    (16) f_local -> SUBROUTINE idSub d . crearCuadruploReturn END_SUBROUTINE f_local
    (17) f_local -> SUBROUTINE idSub d . crearCuadruploReturn END_SUBROUTINE
    (19) crearCuadruploReturn -> . empty
    (97) empty -> .

    END_SUBROUTINE  reduce using rule 97 (empty -> .)

    crearCuadruploReturn           shift and go to state 44
    empty                          shift and go to state 45

state 24

    (21) d -> b .
    (22) d -> b . d
    (21) d -> . b
    (22) d -> . b d
    (23) b -> . variable_matrix_assign
    (24) b -> . printing_variables
    (25) b -> . if_expression
    (26) b -> . do_loops
    (27) b -> . call_subroutine
    (28) b -> . reading_variables
    (29) b -> . EXIT paso4DoExit
    (60) variable_matrix_assign -> . ID ASSIGN expression_arith
    (61) variable_matrix_assign -> . ID LPAREN expression_arith RPAREN ASSIGN expression_arith
    (62) variable_matrix_assign -> . ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith
    (49) printing_variables -> . PRINT Output
    (43) if_expression -> . IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF
    (44) if_expression -> . IF expression_logic paso1IF THEN if_expression_local paso3IF END_IF
    (30) do_loops -> . FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR
    (31) do_loops -> . DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO
    (32) do_loops -> . DO paso1DO LOOP d WHILE expression_logic END_DO paso2DO
    (33) do_loops -> . LOOP paso1DoExit d END_LOOP paso2DoExit paso3DoExit
    (42) call_subroutine -> . CALL ID
    (38) reading_variables -> . READ idrepInput

    END_SUBROUTINE  reduce using rule 21 (d -> b .)
    END             reduce using rule 21 (d -> b .)
    END_LOOP        reduce using rule 21 (d -> b .)
    WHILE           reduce using rule 21 (d -> b .)
    ELSIF           reduce using rule 21 (d -> b .)
    ELSE            reduce using rule 21 (d -> b .)
    END_IF          reduce using rule 21 (d -> b .)
    END_DO          reduce using rule 21 (d -> b .)
    END_FOR         reduce using rule 21 (d -> b .)
    EXIT            shift and go to state 31
    ID              shift and go to state 32
    PRINT           shift and go to state 33
    IF              shift and go to state 34
    FOR             shift and go to state 35
    DO              shift and go to state 36
    LOOP            shift and go to state 37
    CALL            shift and go to state 38
    READ            shift and go to state 39

    b                              shift and go to state 24
    d                              shift and go to state 46
    variable_matrix_assign         shift and go to state 25
    printing_variables             shift and go to state 26
    if_expression                  shift and go to state 27
    do_loops                       shift and go to state 28
    call_subroutine                shift and go to state 29
    reading_variables              shift and go to state 30

state 25

    (23) b -> variable_matrix_assign .

    EXIT            reduce using rule 23 (b -> variable_matrix_assign .)
    ID              reduce using rule 23 (b -> variable_matrix_assign .)
    PRINT           reduce using rule 23 (b -> variable_matrix_assign .)
    IF              reduce using rule 23 (b -> variable_matrix_assign .)
    FOR             reduce using rule 23 (b -> variable_matrix_assign .)
    DO              reduce using rule 23 (b -> variable_matrix_assign .)
    LOOP            reduce using rule 23 (b -> variable_matrix_assign .)
    CALL            reduce using rule 23 (b -> variable_matrix_assign .)
    READ            reduce using rule 23 (b -> variable_matrix_assign .)
    END_SUBROUTINE  reduce using rule 23 (b -> variable_matrix_assign .)
    END             reduce using rule 23 (b -> variable_matrix_assign .)
    END_LOOP        reduce using rule 23 (b -> variable_matrix_assign .)
    WHILE           reduce using rule 23 (b -> variable_matrix_assign .)
    ELSIF           reduce using rule 23 (b -> variable_matrix_assign .)
    ELSE            reduce using rule 23 (b -> variable_matrix_assign .)
    END_IF          reduce using rule 23 (b -> variable_matrix_assign .)
    END_DO          reduce using rule 23 (b -> variable_matrix_assign .)
    END_FOR         reduce using rule 23 (b -> variable_matrix_assign .)


state 26

    (24) b -> printing_variables .

    EXIT            reduce using rule 24 (b -> printing_variables .)
    ID              reduce using rule 24 (b -> printing_variables .)
    PRINT           reduce using rule 24 (b -> printing_variables .)
    IF              reduce using rule 24 (b -> printing_variables .)
    FOR             reduce using rule 24 (b -> printing_variables .)
    DO              reduce using rule 24 (b -> printing_variables .)
    LOOP            reduce using rule 24 (b -> printing_variables .)
    CALL            reduce using rule 24 (b -> printing_variables .)
    READ            reduce using rule 24 (b -> printing_variables .)
    END_SUBROUTINE  reduce using rule 24 (b -> printing_variables .)
    END             reduce using rule 24 (b -> printing_variables .)
    END_LOOP        reduce using rule 24 (b -> printing_variables .)
    WHILE           reduce using rule 24 (b -> printing_variables .)
    ELSIF           reduce using rule 24 (b -> printing_variables .)
    ELSE            reduce using rule 24 (b -> printing_variables .)
    END_IF          reduce using rule 24 (b -> printing_variables .)
    END_DO          reduce using rule 24 (b -> printing_variables .)
    END_FOR         reduce using rule 24 (b -> printing_variables .)


state 27

    (25) b -> if_expression .

    EXIT            reduce using rule 25 (b -> if_expression .)
    ID              reduce using rule 25 (b -> if_expression .)
    PRINT           reduce using rule 25 (b -> if_expression .)
    IF              reduce using rule 25 (b -> if_expression .)
    FOR             reduce using rule 25 (b -> if_expression .)
    DO              reduce using rule 25 (b -> if_expression .)
    LOOP            reduce using rule 25 (b -> if_expression .)
    CALL            reduce using rule 25 (b -> if_expression .)
    READ            reduce using rule 25 (b -> if_expression .)
    END_SUBROUTINE  reduce using rule 25 (b -> if_expression .)
    END             reduce using rule 25 (b -> if_expression .)
    END_LOOP        reduce using rule 25 (b -> if_expression .)
    WHILE           reduce using rule 25 (b -> if_expression .)
    ELSIF           reduce using rule 25 (b -> if_expression .)
    ELSE            reduce using rule 25 (b -> if_expression .)
    END_IF          reduce using rule 25 (b -> if_expression .)
    END_DO          reduce using rule 25 (b -> if_expression .)
    END_FOR         reduce using rule 25 (b -> if_expression .)


state 28

    (26) b -> do_loops .

    EXIT            reduce using rule 26 (b -> do_loops .)
    ID              reduce using rule 26 (b -> do_loops .)
    PRINT           reduce using rule 26 (b -> do_loops .)
    IF              reduce using rule 26 (b -> do_loops .)
    FOR             reduce using rule 26 (b -> do_loops .)
    DO              reduce using rule 26 (b -> do_loops .)
    LOOP            reduce using rule 26 (b -> do_loops .)
    CALL            reduce using rule 26 (b -> do_loops .)
    READ            reduce using rule 26 (b -> do_loops .)
    END_SUBROUTINE  reduce using rule 26 (b -> do_loops .)
    END             reduce using rule 26 (b -> do_loops .)
    END_LOOP        reduce using rule 26 (b -> do_loops .)
    WHILE           reduce using rule 26 (b -> do_loops .)
    ELSIF           reduce using rule 26 (b -> do_loops .)
    ELSE            reduce using rule 26 (b -> do_loops .)
    END_IF          reduce using rule 26 (b -> do_loops .)
    END_DO          reduce using rule 26 (b -> do_loops .)
    END_FOR         reduce using rule 26 (b -> do_loops .)


state 29

    (27) b -> call_subroutine .

    EXIT            reduce using rule 27 (b -> call_subroutine .)
    ID              reduce using rule 27 (b -> call_subroutine .)
    PRINT           reduce using rule 27 (b -> call_subroutine .)
    IF              reduce using rule 27 (b -> call_subroutine .)
    FOR             reduce using rule 27 (b -> call_subroutine .)
    DO              reduce using rule 27 (b -> call_subroutine .)
    LOOP            reduce using rule 27 (b -> call_subroutine .)
    CALL            reduce using rule 27 (b -> call_subroutine .)
    READ            reduce using rule 27 (b -> call_subroutine .)
    END_SUBROUTINE  reduce using rule 27 (b -> call_subroutine .)
    END             reduce using rule 27 (b -> call_subroutine .)
    END_LOOP        reduce using rule 27 (b -> call_subroutine .)
    WHILE           reduce using rule 27 (b -> call_subroutine .)
    ELSIF           reduce using rule 27 (b -> call_subroutine .)
    ELSE            reduce using rule 27 (b -> call_subroutine .)
    END_IF          reduce using rule 27 (b -> call_subroutine .)
    END_DO          reduce using rule 27 (b -> call_subroutine .)
    END_FOR         reduce using rule 27 (b -> call_subroutine .)


state 30

    (28) b -> reading_variables .

    EXIT            reduce using rule 28 (b -> reading_variables .)
    ID              reduce using rule 28 (b -> reading_variables .)
    PRINT           reduce using rule 28 (b -> reading_variables .)
    IF              reduce using rule 28 (b -> reading_variables .)
    FOR             reduce using rule 28 (b -> reading_variables .)
    DO              reduce using rule 28 (b -> reading_variables .)
    LOOP            reduce using rule 28 (b -> reading_variables .)
    CALL            reduce using rule 28 (b -> reading_variables .)
    READ            reduce using rule 28 (b -> reading_variables .)
    END_SUBROUTINE  reduce using rule 28 (b -> reading_variables .)
    END             reduce using rule 28 (b -> reading_variables .)
    END_LOOP        reduce using rule 28 (b -> reading_variables .)
    WHILE           reduce using rule 28 (b -> reading_variables .)
    ELSIF           reduce using rule 28 (b -> reading_variables .)
    ELSE            reduce using rule 28 (b -> reading_variables .)
    END_IF          reduce using rule 28 (b -> reading_variables .)
    END_DO          reduce using rule 28 (b -> reading_variables .)
    END_FOR         reduce using rule 28 (b -> reading_variables .)


state 31

    (29) b -> EXIT . paso4DoExit
    (96) paso4DoExit -> . empty
    (97) empty -> .

    EXIT            reduce using rule 97 (empty -> .)
    ID              reduce using rule 97 (empty -> .)
    PRINT           reduce using rule 97 (empty -> .)
    IF              reduce using rule 97 (empty -> .)
    FOR             reduce using rule 97 (empty -> .)
    DO              reduce using rule 97 (empty -> .)
    LOOP            reduce using rule 97 (empty -> .)
    CALL            reduce using rule 97 (empty -> .)
    READ            reduce using rule 97 (empty -> .)
    END_SUBROUTINE  reduce using rule 97 (empty -> .)
    END             reduce using rule 97 (empty -> .)
    END_LOOP        reduce using rule 97 (empty -> .)
    WHILE           reduce using rule 97 (empty -> .)
    ELSIF           reduce using rule 97 (empty -> .)
    ELSE            reduce using rule 97 (empty -> .)
    END_IF          reduce using rule 97 (empty -> .)
    END_DO          reduce using rule 97 (empty -> .)
    END_FOR         reduce using rule 97 (empty -> .)

    paso4DoExit                    shift and go to state 47
    empty                          shift and go to state 48

state 32

    (60) variable_matrix_assign -> ID . ASSIGN expression_arith
    (61) variable_matrix_assign -> ID . LPAREN expression_arith RPAREN ASSIGN expression_arith
    (62) variable_matrix_assign -> ID . LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith

    ASSIGN          shift and go to state 49
    LPAREN          shift and go to state 50


state 33

    (49) printing_variables -> PRINT . Output
    (50) Output -> . idOut
    (51) Output -> . LPAREN StringOut RPAREN
    (59) idOut -> . ID

    LPAREN          shift and go to state 53
    ID              shift and go to state 54

    Output                         shift and go to state 51
    idOut                          shift and go to state 52

state 34

    (43) if_expression -> IF . expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF
    (44) if_expression -> IF . expression_logic paso1IF THEN if_expression_local paso3IF END_IF
    (75) expression_logic -> . expression_logic OR g
    (76) expression_logic -> . g
    (77) g -> . g AND ge
    (78) g -> . ge
    (79) ge -> . ID GT ID
    (80) ge -> . ID LT ID
    (81) ge -> . ID GE ID
    (82) ge -> . ID LE ID
    (83) ge -> . ID NE ID
    (84) ge -> . ID EQUAL ID
    (85) ge -> . LPAREN expression_logic RPAREN

    ID              shift and go to state 58
    LPAREN          shift and go to state 59

    expression_logic               shift and go to state 55
    g                              shift and go to state 56
    ge                             shift and go to state 57

state 35

    (30) do_loops -> FOR . paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR
    (34) paso1FOR -> . ID

    ID              shift and go to state 61

    paso1FOR                       shift and go to state 60

state 36

    (31) do_loops -> DO . constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO
    (32) do_loops -> DO . paso1DO LOOP d WHILE expression_logic END_DO paso2DO
    (89) constante_entero -> . INT
    (91) paso1DO -> . empty
    (97) empty -> .

    INT             shift and go to state 64
    LOOP            reduce using rule 97 (empty -> .)

    constante_entero               shift and go to state 62
    paso1DO                        shift and go to state 63
    empty                          shift and go to state 65

state 37

    (33) do_loops -> LOOP . paso1DoExit d END_LOOP paso2DoExit paso3DoExit
    (93) paso1DoExit -> . empty
    (97) empty -> .

    EXIT            reduce using rule 97 (empty -> .)
    ID              reduce using rule 97 (empty -> .)
    PRINT           reduce using rule 97 (empty -> .)
    IF              reduce using rule 97 (empty -> .)
    FOR             reduce using rule 97 (empty -> .)
    DO              reduce using rule 97 (empty -> .)
    LOOP            reduce using rule 97 (empty -> .)
    CALL            reduce using rule 97 (empty -> .)
    READ            reduce using rule 97 (empty -> .)

    paso1DoExit                    shift and go to state 66
    empty                          shift and go to state 67

state 38

    (42) call_subroutine -> CALL . ID

    ID              shift and go to state 68


state 39

    (38) reading_variables -> READ . idrepInput
    (39) idrepInput -> . idInput
    (40) idrepInput -> . idInput COMMA idrepInput
    (41) idInput -> . ID

    ID              shift and go to state 71

    idrepInput                     shift and go to state 69
    idInput                        shift and go to state 70

state 40

    (6) var_assign -> type_definition COLONS COLONS var_local . var_dimensiones create_var_table var_assign
    (8) var_dimensiones -> . LARR constante_entero RARR
    (9) var_dimensiones -> . LARR constante_entero COMMA constante_entero RARR
    (10) var_dimensiones -> . empty
    (97) empty -> .

    LARR            shift and go to state 73
    INT_TYPE        reduce using rule 97 (empty -> .)
    FLOAT_TYPE      reduce using rule 97 (empty -> .)
    SUBROUTINE      reduce using rule 97 (empty -> .)
    BEGIN           reduce using rule 97 (empty -> .)

    var_dimensiones                shift and go to state 72
    empty                          shift and go to state 74

state 41

    (12) var_local -> ID . COMMA var_local
    (13) var_local -> ID .

    COMMA           shift and go to state 75
    LARR            reduce using rule 13 (var_local -> ID .)
    INT_TYPE        reduce using rule 13 (var_local -> ID .)
    FLOAT_TYPE      reduce using rule 13 (var_local -> ID .)
    SUBROUTINE      reduce using rule 13 (var_local -> ID .)
    BEGIN           reduce using rule 13 (var_local -> ID .)


state 42

    (1) program -> PROGRAM ID primerCuad var_assign subrutinas rellenaCuad a END . PROGRAM ID

    PROGRAM         shift and go to state 76


state 43

    (20) a -> BEGIN d . END

    END             shift and go to state 77


state 44

    (16) f_local -> SUBROUTINE idSub d crearCuadruploReturn . END_SUBROUTINE f_local
    (17) f_local -> SUBROUTINE idSub d crearCuadruploReturn . END_SUBROUTINE

    END_SUBROUTINE  shift and go to state 78


state 45

    (19) crearCuadruploReturn -> empty .

    END_SUBROUTINE  reduce using rule 19 (crearCuadruploReturn -> empty .)


state 46

    (22) d -> b d .

    END_SUBROUTINE  reduce using rule 22 (d -> b d .)
    END             reduce using rule 22 (d -> b d .)
    END_LOOP        reduce using rule 22 (d -> b d .)
    WHILE           reduce using rule 22 (d -> b d .)
    ELSIF           reduce using rule 22 (d -> b d .)
    ELSE            reduce using rule 22 (d -> b d .)
    END_IF          reduce using rule 22 (d -> b d .)
    END_DO          reduce using rule 22 (d -> b d .)
    END_FOR         reduce using rule 22 (d -> b d .)


state 47

    (29) b -> EXIT paso4DoExit .

    EXIT            reduce using rule 29 (b -> EXIT paso4DoExit .)
    ID              reduce using rule 29 (b -> EXIT paso4DoExit .)
    PRINT           reduce using rule 29 (b -> EXIT paso4DoExit .)
    IF              reduce using rule 29 (b -> EXIT paso4DoExit .)
    FOR             reduce using rule 29 (b -> EXIT paso4DoExit .)
    DO              reduce using rule 29 (b -> EXIT paso4DoExit .)
    LOOP            reduce using rule 29 (b -> EXIT paso4DoExit .)
    CALL            reduce using rule 29 (b -> EXIT paso4DoExit .)
    READ            reduce using rule 29 (b -> EXIT paso4DoExit .)
    END_SUBROUTINE  reduce using rule 29 (b -> EXIT paso4DoExit .)
    END             reduce using rule 29 (b -> EXIT paso4DoExit .)
    END_LOOP        reduce using rule 29 (b -> EXIT paso4DoExit .)
    WHILE           reduce using rule 29 (b -> EXIT paso4DoExit .)
    ELSIF           reduce using rule 29 (b -> EXIT paso4DoExit .)
    ELSE            reduce using rule 29 (b -> EXIT paso4DoExit .)
    END_IF          reduce using rule 29 (b -> EXIT paso4DoExit .)
    END_DO          reduce using rule 29 (b -> EXIT paso4DoExit .)
    END_FOR         reduce using rule 29 (b -> EXIT paso4DoExit .)


state 48

    (96) paso4DoExit -> empty .

    EXIT            reduce using rule 96 (paso4DoExit -> empty .)
    ID              reduce using rule 96 (paso4DoExit -> empty .)
    PRINT           reduce using rule 96 (paso4DoExit -> empty .)
    IF              reduce using rule 96 (paso4DoExit -> empty .)
    FOR             reduce using rule 96 (paso4DoExit -> empty .)
    DO              reduce using rule 96 (paso4DoExit -> empty .)
    LOOP            reduce using rule 96 (paso4DoExit -> empty .)
    CALL            reduce using rule 96 (paso4DoExit -> empty .)
    READ            reduce using rule 96 (paso4DoExit -> empty .)
    END_SUBROUTINE  reduce using rule 96 (paso4DoExit -> empty .)
    END             reduce using rule 96 (paso4DoExit -> empty .)
    END_LOOP        reduce using rule 96 (paso4DoExit -> empty .)
    WHILE           reduce using rule 96 (paso4DoExit -> empty .)
    ELSIF           reduce using rule 96 (paso4DoExit -> empty .)
    ELSE            reduce using rule 96 (paso4DoExit -> empty .)
    END_IF          reduce using rule 96 (paso4DoExit -> empty .)
    END_DO          reduce using rule 96 (paso4DoExit -> empty .)
    END_FOR         reduce using rule 96 (paso4DoExit -> empty .)


state 49

    (60) variable_matrix_assign -> ID ASSIGN . expression_arith
    (63) expression_arith -> . expression_arith PLUS c
    (64) expression_arith -> . expression_arith MINUS c
    (65) expression_arith -> . c
    (66) c -> . c MULTIPLY te
    (67) c -> . c DIVIDE te
    (68) c -> . te
    (69) te -> . ID
    (70) te -> . constante_entero
    (71) te -> . constante_flotante
    (72) te -> . ID LPAREN expression_arith RPAREN
    (73) te -> . ID LPAREN expression_arith COMMA expression_arith RPAREN
    (74) te -> . LPAREN expression_arith RPAREN
    (89) constante_entero -> . INT
    (90) constante_flotante -> . FLOAT

    ID              shift and go to state 79
    LPAREN          shift and go to state 85
    INT             shift and go to state 64
    FLOAT           shift and go to state 86

    expression_arith               shift and go to state 80
    c                              shift and go to state 81
    te                             shift and go to state 82
    constante_entero               shift and go to state 83
    constante_flotante             shift and go to state 84

state 50

    (61) variable_matrix_assign -> ID LPAREN . expression_arith RPAREN ASSIGN expression_arith
    (62) variable_matrix_assign -> ID LPAREN . expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith
    (63) expression_arith -> . expression_arith PLUS c
    (64) expression_arith -> . expression_arith MINUS c
    (65) expression_arith -> . c
    (66) c -> . c MULTIPLY te
    (67) c -> . c DIVIDE te
    (68) c -> . te
    (69) te -> . ID
    (70) te -> . constante_entero
    (71) te -> . constante_flotante
    (72) te -> . ID LPAREN expression_arith RPAREN
    (73) te -> . ID LPAREN expression_arith COMMA expression_arith RPAREN
    (74) te -> . LPAREN expression_arith RPAREN
    (89) constante_entero -> . INT
    (90) constante_flotante -> . FLOAT

    ID              shift and go to state 79
    LPAREN          shift and go to state 85
    INT             shift and go to state 64
    FLOAT           shift and go to state 86

    expression_arith               shift and go to state 87
    c                              shift and go to state 81
    te                             shift and go to state 82
    constante_entero               shift and go to state 83
    constante_flotante             shift and go to state 84

state 51

    (49) printing_variables -> PRINT Output .

    EXIT            reduce using rule 49 (printing_variables -> PRINT Output .)
    ID              reduce using rule 49 (printing_variables -> PRINT Output .)
    PRINT           reduce using rule 49 (printing_variables -> PRINT Output .)
    IF              reduce using rule 49 (printing_variables -> PRINT Output .)
    FOR             reduce using rule 49 (printing_variables -> PRINT Output .)
    DO              reduce using rule 49 (printing_variables -> PRINT Output .)
    LOOP            reduce using rule 49 (printing_variables -> PRINT Output .)
    CALL            reduce using rule 49 (printing_variables -> PRINT Output .)
    READ            reduce using rule 49 (printing_variables -> PRINT Output .)
    END_SUBROUTINE  reduce using rule 49 (printing_variables -> PRINT Output .)
    END             reduce using rule 49 (printing_variables -> PRINT Output .)
    END_LOOP        reduce using rule 49 (printing_variables -> PRINT Output .)
    WHILE           reduce using rule 49 (printing_variables -> PRINT Output .)
    ELSIF           reduce using rule 49 (printing_variables -> PRINT Output .)
    ELSE            reduce using rule 49 (printing_variables -> PRINT Output .)
    END_IF          reduce using rule 49 (printing_variables -> PRINT Output .)
    END_DO          reduce using rule 49 (printing_variables -> PRINT Output .)
    END_FOR         reduce using rule 49 (printing_variables -> PRINT Output .)


state 52

    (50) Output -> idOut .

    EXIT            reduce using rule 50 (Output -> idOut .)
    ID              reduce using rule 50 (Output -> idOut .)
    PRINT           reduce using rule 50 (Output -> idOut .)
    IF              reduce using rule 50 (Output -> idOut .)
    FOR             reduce using rule 50 (Output -> idOut .)
    DO              reduce using rule 50 (Output -> idOut .)
    LOOP            reduce using rule 50 (Output -> idOut .)
    CALL            reduce using rule 50 (Output -> idOut .)
    READ            reduce using rule 50 (Output -> idOut .)
    END_SUBROUTINE  reduce using rule 50 (Output -> idOut .)
    END             reduce using rule 50 (Output -> idOut .)
    END_LOOP        reduce using rule 50 (Output -> idOut .)
    WHILE           reduce using rule 50 (Output -> idOut .)
    ELSIF           reduce using rule 50 (Output -> idOut .)
    ELSE            reduce using rule 50 (Output -> idOut .)
    END_IF          reduce using rule 50 (Output -> idOut .)
    END_DO          reduce using rule 50 (Output -> idOut .)
    END_FOR         reduce using rule 50 (Output -> idOut .)


state 53

    (51) Output -> LPAREN . StringOut RPAREN
    (52) StringOut -> . empty
    (53) StringOut -> . ID StringOut
    (54) StringOut -> . constante_entero StringOut
    (55) StringOut -> . constante_flotante StringOut
    (56) StringOut -> . COLONS StringOut
    (57) StringOut -> . COMMA StringOut
    (58) StringOut -> . QUESTION StringOut
    (97) empty -> .
    (89) constante_entero -> . INT
    (90) constante_flotante -> . FLOAT

    ID              shift and go to state 90
    COLONS          shift and go to state 93
    COMMA           shift and go to state 94
    QUESTION        shift and go to state 95
    RPAREN          reduce using rule 97 (empty -> .)
    INT             shift and go to state 64
    FLOAT           shift and go to state 86

    StringOut                      shift and go to state 88
    empty                          shift and go to state 89
    constante_entero               shift and go to state 91
    constante_flotante             shift and go to state 92

state 54

    (59) idOut -> ID .

    EXIT            reduce using rule 59 (idOut -> ID .)
    ID              reduce using rule 59 (idOut -> ID .)
    PRINT           reduce using rule 59 (idOut -> ID .)
    IF              reduce using rule 59 (idOut -> ID .)
    FOR             reduce using rule 59 (idOut -> ID .)
    DO              reduce using rule 59 (idOut -> ID .)
    LOOP            reduce using rule 59 (idOut -> ID .)
    CALL            reduce using rule 59 (idOut -> ID .)
    READ            reduce using rule 59 (idOut -> ID .)
    END_SUBROUTINE  reduce using rule 59 (idOut -> ID .)
    END             reduce using rule 59 (idOut -> ID .)
    END_LOOP        reduce using rule 59 (idOut -> ID .)
    WHILE           reduce using rule 59 (idOut -> ID .)
    ELSIF           reduce using rule 59 (idOut -> ID .)
    ELSE            reduce using rule 59 (idOut -> ID .)
    END_IF          reduce using rule 59 (idOut -> ID .)
    END_DO          reduce using rule 59 (idOut -> ID .)
    END_FOR         reduce using rule 59 (idOut -> ID .)


state 55

    (43) if_expression -> IF expression_logic . paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF
    (44) if_expression -> IF expression_logic . paso1IF THEN if_expression_local paso3IF END_IF
    (75) expression_logic -> expression_logic . OR g
    (86) paso1IF -> . empty
    (97) empty -> .

    OR              shift and go to state 97
    THEN            reduce using rule 97 (empty -> .)

    paso1IF                        shift and go to state 96
    empty                          shift and go to state 98

state 56

    (76) expression_logic -> g .
    (77) g -> g . AND ge

    OR              reduce using rule 76 (expression_logic -> g .)
    THEN            reduce using rule 76 (expression_logic -> g .)
    RPAREN          reduce using rule 76 (expression_logic -> g .)
    END_DO          reduce using rule 76 (expression_logic -> g .)
    AND             shift and go to state 99


state 57

    (78) g -> ge .

    AND             reduce using rule 78 (g -> ge .)
    OR              reduce using rule 78 (g -> ge .)
    THEN            reduce using rule 78 (g -> ge .)
    RPAREN          reduce using rule 78 (g -> ge .)
    END_DO          reduce using rule 78 (g -> ge .)


state 58

    (79) ge -> ID . GT ID
    (80) ge -> ID . LT ID
    (81) ge -> ID . GE ID
    (82) ge -> ID . LE ID
    (83) ge -> ID . NE ID
    (84) ge -> ID . EQUAL ID

    GT              shift and go to state 100
    LT              shift and go to state 101
    GE              shift and go to state 102
    LE              shift and go to state 103
    NE              shift and go to state 104
    EQUAL           shift and go to state 105


state 59

    (85) ge -> LPAREN . expression_logic RPAREN
    (75) expression_logic -> . expression_logic OR g
    (76) expression_logic -> . g
    (77) g -> . g AND ge
    (78) g -> . ge
    (79) ge -> . ID GT ID
    (80) ge -> . ID LT ID
    (81) ge -> . ID GE ID
    (82) ge -> . ID LE ID
    (83) ge -> . ID NE ID
    (84) ge -> . ID EQUAL ID
    (85) ge -> . LPAREN expression_logic RPAREN

    ID              shift and go to state 58
    LPAREN          shift and go to state 59

    expression_logic               shift and go to state 106
    g                              shift and go to state 56
    ge                             shift and go to state 57

state 60

    (30) do_loops -> FOR paso1FOR . ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR

    ASSIGN          shift and go to state 107


state 61

    (34) paso1FOR -> ID .

    ASSIGN          reduce using rule 34 (paso1FOR -> ID .)


state 62

    (31) do_loops -> DO constante_entero . COMMA constante_entero COMMA variable_matrix_assign d END_DO

    COMMA           shift and go to state 108


state 63

    (32) do_loops -> DO paso1DO . LOOP d WHILE expression_logic END_DO paso2DO

    LOOP            shift and go to state 109


state 64

    (89) constante_entero -> INT .

    COMMA           reduce using rule 89 (constante_entero -> INT .)
    MULTIPLY        reduce using rule 89 (constante_entero -> INT .)
    DIVIDE          reduce using rule 89 (constante_entero -> INT .)
    PLUS            reduce using rule 89 (constante_entero -> INT .)
    MINUS           reduce using rule 89 (constante_entero -> INT .)
    EXIT            reduce using rule 89 (constante_entero -> INT .)
    ID              reduce using rule 89 (constante_entero -> INT .)
    PRINT           reduce using rule 89 (constante_entero -> INT .)
    IF              reduce using rule 89 (constante_entero -> INT .)
    FOR             reduce using rule 89 (constante_entero -> INT .)
    DO              reduce using rule 89 (constante_entero -> INT .)
    LOOP            reduce using rule 89 (constante_entero -> INT .)
    CALL            reduce using rule 89 (constante_entero -> INT .)
    READ            reduce using rule 89 (constante_entero -> INT .)
    END_SUBROUTINE  reduce using rule 89 (constante_entero -> INT .)
    END             reduce using rule 89 (constante_entero -> INT .)
    END_LOOP        reduce using rule 89 (constante_entero -> INT .)
    WHILE           reduce using rule 89 (constante_entero -> INT .)
    ELSIF           reduce using rule 89 (constante_entero -> INT .)
    ELSE            reduce using rule 89 (constante_entero -> INT .)
    END_IF          reduce using rule 89 (constante_entero -> INT .)
    END_DO          reduce using rule 89 (constante_entero -> INT .)
    END_FOR         reduce using rule 89 (constante_entero -> INT .)
    RPAREN          reduce using rule 89 (constante_entero -> INT .)
    COLONS          reduce using rule 89 (constante_entero -> INT .)
    QUESTION        reduce using rule 89 (constante_entero -> INT .)
    INT             reduce using rule 89 (constante_entero -> INT .)
    FLOAT           reduce using rule 89 (constante_entero -> INT .)
    RARR            reduce using rule 89 (constante_entero -> INT .)


state 65

    (91) paso1DO -> empty .

    LOOP            reduce using rule 91 (paso1DO -> empty .)


state 66

    (33) do_loops -> LOOP paso1DoExit . d END_LOOP paso2DoExit paso3DoExit
    (21) d -> . b
    (22) d -> . b d
    (23) b -> . variable_matrix_assign
    (24) b -> . printing_variables
    (25) b -> . if_expression
    (26) b -> . do_loops
    (27) b -> . call_subroutine
    (28) b -> . reading_variables
    (29) b -> . EXIT paso4DoExit
    (60) variable_matrix_assign -> . ID ASSIGN expression_arith
    (61) variable_matrix_assign -> . ID LPAREN expression_arith RPAREN ASSIGN expression_arith
    (62) variable_matrix_assign -> . ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith
    (49) printing_variables -> . PRINT Output
    (43) if_expression -> . IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF
    (44) if_expression -> . IF expression_logic paso1IF THEN if_expression_local paso3IF END_IF
    (30) do_loops -> . FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR
    (31) do_loops -> . DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO
    (32) do_loops -> . DO paso1DO LOOP d WHILE expression_logic END_DO paso2DO
    (33) do_loops -> . LOOP paso1DoExit d END_LOOP paso2DoExit paso3DoExit
    (42) call_subroutine -> . CALL ID
    (38) reading_variables -> . READ idrepInput

    EXIT            shift and go to state 31
    ID              shift and go to state 32
    PRINT           shift and go to state 33
    IF              shift and go to state 34
    FOR             shift and go to state 35
    DO              shift and go to state 36
    LOOP            shift and go to state 37
    CALL            shift and go to state 38
    READ            shift and go to state 39

    d                              shift and go to state 110
    b                              shift and go to state 24
    variable_matrix_assign         shift and go to state 25
    printing_variables             shift and go to state 26
    if_expression                  shift and go to state 27
    do_loops                       shift and go to state 28
    call_subroutine                shift and go to state 29
    reading_variables              shift and go to state 30

state 67

    (93) paso1DoExit -> empty .

    EXIT            reduce using rule 93 (paso1DoExit -> empty .)
    ID              reduce using rule 93 (paso1DoExit -> empty .)
    PRINT           reduce using rule 93 (paso1DoExit -> empty .)
    IF              reduce using rule 93 (paso1DoExit -> empty .)
    FOR             reduce using rule 93 (paso1DoExit -> empty .)
    DO              reduce using rule 93 (paso1DoExit -> empty .)
    LOOP            reduce using rule 93 (paso1DoExit -> empty .)
    CALL            reduce using rule 93 (paso1DoExit -> empty .)
    READ            reduce using rule 93 (paso1DoExit -> empty .)


state 68

    (42) call_subroutine -> CALL ID .

    EXIT            reduce using rule 42 (call_subroutine -> CALL ID .)
    ID              reduce using rule 42 (call_subroutine -> CALL ID .)
    PRINT           reduce using rule 42 (call_subroutine -> CALL ID .)
    IF              reduce using rule 42 (call_subroutine -> CALL ID .)
    FOR             reduce using rule 42 (call_subroutine -> CALL ID .)
    DO              reduce using rule 42 (call_subroutine -> CALL ID .)
    LOOP            reduce using rule 42 (call_subroutine -> CALL ID .)
    CALL            reduce using rule 42 (call_subroutine -> CALL ID .)
    READ            reduce using rule 42 (call_subroutine -> CALL ID .)
    END_SUBROUTINE  reduce using rule 42 (call_subroutine -> CALL ID .)
    END             reduce using rule 42 (call_subroutine -> CALL ID .)
    END_LOOP        reduce using rule 42 (call_subroutine -> CALL ID .)
    WHILE           reduce using rule 42 (call_subroutine -> CALL ID .)
    ELSIF           reduce using rule 42 (call_subroutine -> CALL ID .)
    ELSE            reduce using rule 42 (call_subroutine -> CALL ID .)
    END_IF          reduce using rule 42 (call_subroutine -> CALL ID .)
    END_DO          reduce using rule 42 (call_subroutine -> CALL ID .)
    END_FOR         reduce using rule 42 (call_subroutine -> CALL ID .)


state 69

    (38) reading_variables -> READ idrepInput .

    EXIT            reduce using rule 38 (reading_variables -> READ idrepInput .)
    ID              reduce using rule 38 (reading_variables -> READ idrepInput .)
    PRINT           reduce using rule 38 (reading_variables -> READ idrepInput .)
    IF              reduce using rule 38 (reading_variables -> READ idrepInput .)
    FOR             reduce using rule 38 (reading_variables -> READ idrepInput .)
    DO              reduce using rule 38 (reading_variables -> READ idrepInput .)
    LOOP            reduce using rule 38 (reading_variables -> READ idrepInput .)
    CALL            reduce using rule 38 (reading_variables -> READ idrepInput .)
    READ            reduce using rule 38 (reading_variables -> READ idrepInput .)
    END_SUBROUTINE  reduce using rule 38 (reading_variables -> READ idrepInput .)
    END             reduce using rule 38 (reading_variables -> READ idrepInput .)
    END_LOOP        reduce using rule 38 (reading_variables -> READ idrepInput .)
    WHILE           reduce using rule 38 (reading_variables -> READ idrepInput .)
    ELSIF           reduce using rule 38 (reading_variables -> READ idrepInput .)
    ELSE            reduce using rule 38 (reading_variables -> READ idrepInput .)
    END_IF          reduce using rule 38 (reading_variables -> READ idrepInput .)
    END_DO          reduce using rule 38 (reading_variables -> READ idrepInput .)
    END_FOR         reduce using rule 38 (reading_variables -> READ idrepInput .)


state 70

    (39) idrepInput -> idInput .
    (40) idrepInput -> idInput . COMMA idrepInput

    EXIT            reduce using rule 39 (idrepInput -> idInput .)
    ID              reduce using rule 39 (idrepInput -> idInput .)
    PRINT           reduce using rule 39 (idrepInput -> idInput .)
    IF              reduce using rule 39 (idrepInput -> idInput .)
    FOR             reduce using rule 39 (idrepInput -> idInput .)
    DO              reduce using rule 39 (idrepInput -> idInput .)
    LOOP            reduce using rule 39 (idrepInput -> idInput .)
    CALL            reduce using rule 39 (idrepInput -> idInput .)
    READ            reduce using rule 39 (idrepInput -> idInput .)
    END_SUBROUTINE  reduce using rule 39 (idrepInput -> idInput .)
    END             reduce using rule 39 (idrepInput -> idInput .)
    END_LOOP        reduce using rule 39 (idrepInput -> idInput .)
    WHILE           reduce using rule 39 (idrepInput -> idInput .)
    ELSIF           reduce using rule 39 (idrepInput -> idInput .)
    ELSE            reduce using rule 39 (idrepInput -> idInput .)
    END_IF          reduce using rule 39 (idrepInput -> idInput .)
    END_DO          reduce using rule 39 (idrepInput -> idInput .)
    END_FOR         reduce using rule 39 (idrepInput -> idInput .)
    COMMA           shift and go to state 111


state 71

    (41) idInput -> ID .

    COMMA           reduce using rule 41 (idInput -> ID .)
    EXIT            reduce using rule 41 (idInput -> ID .)
    ID              reduce using rule 41 (idInput -> ID .)
    PRINT           reduce using rule 41 (idInput -> ID .)
    IF              reduce using rule 41 (idInput -> ID .)
    FOR             reduce using rule 41 (idInput -> ID .)
    DO              reduce using rule 41 (idInput -> ID .)
    LOOP            reduce using rule 41 (idInput -> ID .)
    CALL            reduce using rule 41 (idInput -> ID .)
    READ            reduce using rule 41 (idInput -> ID .)
    END_SUBROUTINE  reduce using rule 41 (idInput -> ID .)
    END             reduce using rule 41 (idInput -> ID .)
    END_LOOP        reduce using rule 41 (idInput -> ID .)
    WHILE           reduce using rule 41 (idInput -> ID .)
    ELSIF           reduce using rule 41 (idInput -> ID .)
    ELSE            reduce using rule 41 (idInput -> ID .)
    END_IF          reduce using rule 41 (idInput -> ID .)
    END_DO          reduce using rule 41 (idInput -> ID .)
    END_FOR         reduce using rule 41 (idInput -> ID .)


state 72

    (6) var_assign -> type_definition COLONS COLONS var_local var_dimensiones . create_var_table var_assign
    (11) create_var_table -> . empty
    (97) empty -> .

    INT_TYPE        reduce using rule 97 (empty -> .)
    FLOAT_TYPE      reduce using rule 97 (empty -> .)
    SUBROUTINE      reduce using rule 97 (empty -> .)
    BEGIN           reduce using rule 97 (empty -> .)

    create_var_table               shift and go to state 112
    empty                          shift and go to state 113

state 73

    (8) var_dimensiones -> LARR . constante_entero RARR
    (9) var_dimensiones -> LARR . constante_entero COMMA constante_entero RARR
    (89) constante_entero -> . INT

    INT             shift and go to state 64

    constante_entero               shift and go to state 114

state 74

    (10) var_dimensiones -> empty .

    INT_TYPE        reduce using rule 10 (var_dimensiones -> empty .)
    FLOAT_TYPE      reduce using rule 10 (var_dimensiones -> empty .)
    SUBROUTINE      reduce using rule 10 (var_dimensiones -> empty .)
    BEGIN           reduce using rule 10 (var_dimensiones -> empty .)


state 75

    (12) var_local -> ID COMMA . var_local
    (12) var_local -> . ID COMMA var_local
    (13) var_local -> . ID

    ID              shift and go to state 41

    var_local                      shift and go to state 115

state 76

    (1) program -> PROGRAM ID primerCuad var_assign subrutinas rellenaCuad a END PROGRAM . ID

    ID              shift and go to state 116


state 77

    (20) a -> BEGIN d END .

    END             reduce using rule 20 (a -> BEGIN d END .)


state 78

    (16) f_local -> SUBROUTINE idSub d crearCuadruploReturn END_SUBROUTINE . f_local
    (17) f_local -> SUBROUTINE idSub d crearCuadruploReturn END_SUBROUTINE .
    (16) f_local -> . SUBROUTINE idSub d crearCuadruploReturn END_SUBROUTINE f_local
    (17) f_local -> . SUBROUTINE idSub d crearCuadruploReturn END_SUBROUTINE

    BEGIN           reduce using rule 17 (f_local -> SUBROUTINE idSub d crearCuadruploReturn END_SUBROUTINE .)
    SUBROUTINE      shift and go to state 14

    f_local                        shift and go to state 117

state 79

    (69) te -> ID .
    (72) te -> ID . LPAREN expression_arith RPAREN
    (73) te -> ID . LPAREN expression_arith COMMA expression_arith RPAREN

    MULTIPLY        reduce using rule 69 (te -> ID .)
    DIVIDE          reduce using rule 69 (te -> ID .)
    PLUS            reduce using rule 69 (te -> ID .)
    MINUS           reduce using rule 69 (te -> ID .)
    EXIT            reduce using rule 69 (te -> ID .)
    ID              reduce using rule 69 (te -> ID .)
    PRINT           reduce using rule 69 (te -> ID .)
    IF              reduce using rule 69 (te -> ID .)
    FOR             reduce using rule 69 (te -> ID .)
    DO              reduce using rule 69 (te -> ID .)
    LOOP            reduce using rule 69 (te -> ID .)
    CALL            reduce using rule 69 (te -> ID .)
    READ            reduce using rule 69 (te -> ID .)
    END_SUBROUTINE  reduce using rule 69 (te -> ID .)
    END             reduce using rule 69 (te -> ID .)
    END_LOOP        reduce using rule 69 (te -> ID .)
    WHILE           reduce using rule 69 (te -> ID .)
    ELSIF           reduce using rule 69 (te -> ID .)
    ELSE            reduce using rule 69 (te -> ID .)
    END_IF          reduce using rule 69 (te -> ID .)
    END_DO          reduce using rule 69 (te -> ID .)
    END_FOR         reduce using rule 69 (te -> ID .)
    RPAREN          reduce using rule 69 (te -> ID .)
    COMMA           reduce using rule 69 (te -> ID .)
    LPAREN          shift and go to state 118


state 80

    (60) variable_matrix_assign -> ID ASSIGN expression_arith .
    (63) expression_arith -> expression_arith . PLUS c
    (64) expression_arith -> expression_arith . MINUS c

    EXIT            reduce using rule 60 (variable_matrix_assign -> ID ASSIGN expression_arith .)
    ID              reduce using rule 60 (variable_matrix_assign -> ID ASSIGN expression_arith .)
    PRINT           reduce using rule 60 (variable_matrix_assign -> ID ASSIGN expression_arith .)
    IF              reduce using rule 60 (variable_matrix_assign -> ID ASSIGN expression_arith .)
    FOR             reduce using rule 60 (variable_matrix_assign -> ID ASSIGN expression_arith .)
    DO              reduce using rule 60 (variable_matrix_assign -> ID ASSIGN expression_arith .)
    LOOP            reduce using rule 60 (variable_matrix_assign -> ID ASSIGN expression_arith .)
    CALL            reduce using rule 60 (variable_matrix_assign -> ID ASSIGN expression_arith .)
    READ            reduce using rule 60 (variable_matrix_assign -> ID ASSIGN expression_arith .)
    END_SUBROUTINE  reduce using rule 60 (variable_matrix_assign -> ID ASSIGN expression_arith .)
    END             reduce using rule 60 (variable_matrix_assign -> ID ASSIGN expression_arith .)
    END_LOOP        reduce using rule 60 (variable_matrix_assign -> ID ASSIGN expression_arith .)
    WHILE           reduce using rule 60 (variable_matrix_assign -> ID ASSIGN expression_arith .)
    ELSIF           reduce using rule 60 (variable_matrix_assign -> ID ASSIGN expression_arith .)
    ELSE            reduce using rule 60 (variable_matrix_assign -> ID ASSIGN expression_arith .)
    END_IF          reduce using rule 60 (variable_matrix_assign -> ID ASSIGN expression_arith .)
    END_DO          reduce using rule 60 (variable_matrix_assign -> ID ASSIGN expression_arith .)
    END_FOR         reduce using rule 60 (variable_matrix_assign -> ID ASSIGN expression_arith .)
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120


state 81

    (65) expression_arith -> c .
    (66) c -> c . MULTIPLY te
    (67) c -> c . DIVIDE te

    PLUS            reduce using rule 65 (expression_arith -> c .)
    MINUS           reduce using rule 65 (expression_arith -> c .)
    EXIT            reduce using rule 65 (expression_arith -> c .)
    ID              reduce using rule 65 (expression_arith -> c .)
    PRINT           reduce using rule 65 (expression_arith -> c .)
    IF              reduce using rule 65 (expression_arith -> c .)
    FOR             reduce using rule 65 (expression_arith -> c .)
    DO              reduce using rule 65 (expression_arith -> c .)
    LOOP            reduce using rule 65 (expression_arith -> c .)
    CALL            reduce using rule 65 (expression_arith -> c .)
    READ            reduce using rule 65 (expression_arith -> c .)
    END_SUBROUTINE  reduce using rule 65 (expression_arith -> c .)
    END             reduce using rule 65 (expression_arith -> c .)
    END_LOOP        reduce using rule 65 (expression_arith -> c .)
    WHILE           reduce using rule 65 (expression_arith -> c .)
    ELSIF           reduce using rule 65 (expression_arith -> c .)
    ELSE            reduce using rule 65 (expression_arith -> c .)
    END_IF          reduce using rule 65 (expression_arith -> c .)
    END_DO          reduce using rule 65 (expression_arith -> c .)
    END_FOR         reduce using rule 65 (expression_arith -> c .)
    RPAREN          reduce using rule 65 (expression_arith -> c .)
    COMMA           reduce using rule 65 (expression_arith -> c .)
    MULTIPLY        shift and go to state 121
    DIVIDE          shift and go to state 122


state 82

    (68) c -> te .

    MULTIPLY        reduce using rule 68 (c -> te .)
    DIVIDE          reduce using rule 68 (c -> te .)
    PLUS            reduce using rule 68 (c -> te .)
    MINUS           reduce using rule 68 (c -> te .)
    EXIT            reduce using rule 68 (c -> te .)
    ID              reduce using rule 68 (c -> te .)
    PRINT           reduce using rule 68 (c -> te .)
    IF              reduce using rule 68 (c -> te .)
    FOR             reduce using rule 68 (c -> te .)
    DO              reduce using rule 68 (c -> te .)
    LOOP            reduce using rule 68 (c -> te .)
    CALL            reduce using rule 68 (c -> te .)
    READ            reduce using rule 68 (c -> te .)
    END_SUBROUTINE  reduce using rule 68 (c -> te .)
    END             reduce using rule 68 (c -> te .)
    END_LOOP        reduce using rule 68 (c -> te .)
    WHILE           reduce using rule 68 (c -> te .)
    ELSIF           reduce using rule 68 (c -> te .)
    ELSE            reduce using rule 68 (c -> te .)
    END_IF          reduce using rule 68 (c -> te .)
    END_DO          reduce using rule 68 (c -> te .)
    END_FOR         reduce using rule 68 (c -> te .)
    RPAREN          reduce using rule 68 (c -> te .)
    COMMA           reduce using rule 68 (c -> te .)


state 83

    (70) te -> constante_entero .

    MULTIPLY        reduce using rule 70 (te -> constante_entero .)
    DIVIDE          reduce using rule 70 (te -> constante_entero .)
    PLUS            reduce using rule 70 (te -> constante_entero .)
    MINUS           reduce using rule 70 (te -> constante_entero .)
    EXIT            reduce using rule 70 (te -> constante_entero .)
    ID              reduce using rule 70 (te -> constante_entero .)
    PRINT           reduce using rule 70 (te -> constante_entero .)
    IF              reduce using rule 70 (te -> constante_entero .)
    FOR             reduce using rule 70 (te -> constante_entero .)
    DO              reduce using rule 70 (te -> constante_entero .)
    LOOP            reduce using rule 70 (te -> constante_entero .)
    CALL            reduce using rule 70 (te -> constante_entero .)
    READ            reduce using rule 70 (te -> constante_entero .)
    END_SUBROUTINE  reduce using rule 70 (te -> constante_entero .)
    END             reduce using rule 70 (te -> constante_entero .)
    END_LOOP        reduce using rule 70 (te -> constante_entero .)
    WHILE           reduce using rule 70 (te -> constante_entero .)
    ELSIF           reduce using rule 70 (te -> constante_entero .)
    ELSE            reduce using rule 70 (te -> constante_entero .)
    END_IF          reduce using rule 70 (te -> constante_entero .)
    END_DO          reduce using rule 70 (te -> constante_entero .)
    END_FOR         reduce using rule 70 (te -> constante_entero .)
    RPAREN          reduce using rule 70 (te -> constante_entero .)
    COMMA           reduce using rule 70 (te -> constante_entero .)


state 84

    (71) te -> constante_flotante .

    MULTIPLY        reduce using rule 71 (te -> constante_flotante .)
    DIVIDE          reduce using rule 71 (te -> constante_flotante .)
    PLUS            reduce using rule 71 (te -> constante_flotante .)
    MINUS           reduce using rule 71 (te -> constante_flotante .)
    EXIT            reduce using rule 71 (te -> constante_flotante .)
    ID              reduce using rule 71 (te -> constante_flotante .)
    PRINT           reduce using rule 71 (te -> constante_flotante .)
    IF              reduce using rule 71 (te -> constante_flotante .)
    FOR             reduce using rule 71 (te -> constante_flotante .)
    DO              reduce using rule 71 (te -> constante_flotante .)
    LOOP            reduce using rule 71 (te -> constante_flotante .)
    CALL            reduce using rule 71 (te -> constante_flotante .)
    READ            reduce using rule 71 (te -> constante_flotante .)
    END_SUBROUTINE  reduce using rule 71 (te -> constante_flotante .)
    END             reduce using rule 71 (te -> constante_flotante .)
    END_LOOP        reduce using rule 71 (te -> constante_flotante .)
    WHILE           reduce using rule 71 (te -> constante_flotante .)
    ELSIF           reduce using rule 71 (te -> constante_flotante .)
    ELSE            reduce using rule 71 (te -> constante_flotante .)
    END_IF          reduce using rule 71 (te -> constante_flotante .)
    END_DO          reduce using rule 71 (te -> constante_flotante .)
    END_FOR         reduce using rule 71 (te -> constante_flotante .)
    RPAREN          reduce using rule 71 (te -> constante_flotante .)
    COMMA           reduce using rule 71 (te -> constante_flotante .)


state 85

    (74) te -> LPAREN . expression_arith RPAREN
    (63) expression_arith -> . expression_arith PLUS c
    (64) expression_arith -> . expression_arith MINUS c
    (65) expression_arith -> . c
    (66) c -> . c MULTIPLY te
    (67) c -> . c DIVIDE te
    (68) c -> . te
    (69) te -> . ID
    (70) te -> . constante_entero
    (71) te -> . constante_flotante
    (72) te -> . ID LPAREN expression_arith RPAREN
    (73) te -> . ID LPAREN expression_arith COMMA expression_arith RPAREN
    (74) te -> . LPAREN expression_arith RPAREN
    (89) constante_entero -> . INT
    (90) constante_flotante -> . FLOAT

    ID              shift and go to state 79
    LPAREN          shift and go to state 85
    INT             shift and go to state 64
    FLOAT           shift and go to state 86

    expression_arith               shift and go to state 123
    c                              shift and go to state 81
    te                             shift and go to state 82
    constante_entero               shift and go to state 83
    constante_flotante             shift and go to state 84

state 86

    (90) constante_flotante -> FLOAT .

    MULTIPLY        reduce using rule 90 (constante_flotante -> FLOAT .)
    DIVIDE          reduce using rule 90 (constante_flotante -> FLOAT .)
    PLUS            reduce using rule 90 (constante_flotante -> FLOAT .)
    MINUS           reduce using rule 90 (constante_flotante -> FLOAT .)
    EXIT            reduce using rule 90 (constante_flotante -> FLOAT .)
    ID              reduce using rule 90 (constante_flotante -> FLOAT .)
    PRINT           reduce using rule 90 (constante_flotante -> FLOAT .)
    IF              reduce using rule 90 (constante_flotante -> FLOAT .)
    FOR             reduce using rule 90 (constante_flotante -> FLOAT .)
    DO              reduce using rule 90 (constante_flotante -> FLOAT .)
    LOOP            reduce using rule 90 (constante_flotante -> FLOAT .)
    CALL            reduce using rule 90 (constante_flotante -> FLOAT .)
    READ            reduce using rule 90 (constante_flotante -> FLOAT .)
    END_SUBROUTINE  reduce using rule 90 (constante_flotante -> FLOAT .)
    END             reduce using rule 90 (constante_flotante -> FLOAT .)
    END_LOOP        reduce using rule 90 (constante_flotante -> FLOAT .)
    WHILE           reduce using rule 90 (constante_flotante -> FLOAT .)
    ELSIF           reduce using rule 90 (constante_flotante -> FLOAT .)
    ELSE            reduce using rule 90 (constante_flotante -> FLOAT .)
    END_IF          reduce using rule 90 (constante_flotante -> FLOAT .)
    END_DO          reduce using rule 90 (constante_flotante -> FLOAT .)
    END_FOR         reduce using rule 90 (constante_flotante -> FLOAT .)
    RPAREN          reduce using rule 90 (constante_flotante -> FLOAT .)
    COMMA           reduce using rule 90 (constante_flotante -> FLOAT .)
    COLONS          reduce using rule 90 (constante_flotante -> FLOAT .)
    QUESTION        reduce using rule 90 (constante_flotante -> FLOAT .)
    INT             reduce using rule 90 (constante_flotante -> FLOAT .)
    FLOAT           reduce using rule 90 (constante_flotante -> FLOAT .)


state 87

    (61) variable_matrix_assign -> ID LPAREN expression_arith . RPAREN ASSIGN expression_arith
    (62) variable_matrix_assign -> ID LPAREN expression_arith . COMMA expression_arith RPAREN ASSIGN expression_arith
    (63) expression_arith -> expression_arith . PLUS c
    (64) expression_arith -> expression_arith . MINUS c

    RPAREN          shift and go to state 124
    COMMA           shift and go to state 125
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120


state 88

    (51) Output -> LPAREN StringOut . RPAREN

    RPAREN          shift and go to state 126


state 89

    (52) StringOut -> empty .

    RPAREN          reduce using rule 52 (StringOut -> empty .)


state 90

    (53) StringOut -> ID . StringOut
    (52) StringOut -> . empty
    (53) StringOut -> . ID StringOut
    (54) StringOut -> . constante_entero StringOut
    (55) StringOut -> . constante_flotante StringOut
    (56) StringOut -> . COLONS StringOut
    (57) StringOut -> . COMMA StringOut
    (58) StringOut -> . QUESTION StringOut
    (97) empty -> .
    (89) constante_entero -> . INT
    (90) constante_flotante -> . FLOAT

    ID              shift and go to state 90
    COLONS          shift and go to state 93
    COMMA           shift and go to state 94
    QUESTION        shift and go to state 95
    RPAREN          reduce using rule 97 (empty -> .)
    INT             shift and go to state 64
    FLOAT           shift and go to state 86

    StringOut                      shift and go to state 127
    empty                          shift and go to state 89
    constante_entero               shift and go to state 91
    constante_flotante             shift and go to state 92

state 91

    (54) StringOut -> constante_entero . StringOut
    (52) StringOut -> . empty
    (53) StringOut -> . ID StringOut
    (54) StringOut -> . constante_entero StringOut
    (55) StringOut -> . constante_flotante StringOut
    (56) StringOut -> . COLONS StringOut
    (57) StringOut -> . COMMA StringOut
    (58) StringOut -> . QUESTION StringOut
    (97) empty -> .
    (89) constante_entero -> . INT
    (90) constante_flotante -> . FLOAT

    ID              shift and go to state 90
    COLONS          shift and go to state 93
    COMMA           shift and go to state 94
    QUESTION        shift and go to state 95
    RPAREN          reduce using rule 97 (empty -> .)
    INT             shift and go to state 64
    FLOAT           shift and go to state 86

    constante_entero               shift and go to state 91
    StringOut                      shift and go to state 128
    empty                          shift and go to state 89
    constante_flotante             shift and go to state 92

state 92

    (55) StringOut -> constante_flotante . StringOut
    (52) StringOut -> . empty
    (53) StringOut -> . ID StringOut
    (54) StringOut -> . constante_entero StringOut
    (55) StringOut -> . constante_flotante StringOut
    (56) StringOut -> . COLONS StringOut
    (57) StringOut -> . COMMA StringOut
    (58) StringOut -> . QUESTION StringOut
    (97) empty -> .
    (89) constante_entero -> . INT
    (90) constante_flotante -> . FLOAT

    ID              shift and go to state 90
    COLONS          shift and go to state 93
    COMMA           shift and go to state 94
    QUESTION        shift and go to state 95
    RPAREN          reduce using rule 97 (empty -> .)
    INT             shift and go to state 64
    FLOAT           shift and go to state 86

    constante_flotante             shift and go to state 92
    StringOut                      shift and go to state 129
    empty                          shift and go to state 89
    constante_entero               shift and go to state 91

state 93

    (56) StringOut -> COLONS . StringOut
    (52) StringOut -> . empty
    (53) StringOut -> . ID StringOut
    (54) StringOut -> . constante_entero StringOut
    (55) StringOut -> . constante_flotante StringOut
    (56) StringOut -> . COLONS StringOut
    (57) StringOut -> . COMMA StringOut
    (58) StringOut -> . QUESTION StringOut
    (97) empty -> .
    (89) constante_entero -> . INT
    (90) constante_flotante -> . FLOAT

    ID              shift and go to state 90
    COLONS          shift and go to state 93
    COMMA           shift and go to state 94
    QUESTION        shift and go to state 95
    RPAREN          reduce using rule 97 (empty -> .)
    INT             shift and go to state 64
    FLOAT           shift and go to state 86

    StringOut                      shift and go to state 130
    empty                          shift and go to state 89
    constante_entero               shift and go to state 91
    constante_flotante             shift and go to state 92

state 94

    (57) StringOut -> COMMA . StringOut
    (52) StringOut -> . empty
    (53) StringOut -> . ID StringOut
    (54) StringOut -> . constante_entero StringOut
    (55) StringOut -> . constante_flotante StringOut
    (56) StringOut -> . COLONS StringOut
    (57) StringOut -> . COMMA StringOut
    (58) StringOut -> . QUESTION StringOut
    (97) empty -> .
    (89) constante_entero -> . INT
    (90) constante_flotante -> . FLOAT

    ID              shift and go to state 90
    COLONS          shift and go to state 93
    COMMA           shift and go to state 94
    QUESTION        shift and go to state 95
    RPAREN          reduce using rule 97 (empty -> .)
    INT             shift and go to state 64
    FLOAT           shift and go to state 86

    StringOut                      shift and go to state 131
    empty                          shift and go to state 89
    constante_entero               shift and go to state 91
    constante_flotante             shift and go to state 92

state 95

    (58) StringOut -> QUESTION . StringOut
    (52) StringOut -> . empty
    (53) StringOut -> . ID StringOut
    (54) StringOut -> . constante_entero StringOut
    (55) StringOut -> . constante_flotante StringOut
    (56) StringOut -> . COLONS StringOut
    (57) StringOut -> . COMMA StringOut
    (58) StringOut -> . QUESTION StringOut
    (97) empty -> .
    (89) constante_entero -> . INT
    (90) constante_flotante -> . FLOAT

    ID              shift and go to state 90
    COLONS          shift and go to state 93
    COMMA           shift and go to state 94
    QUESTION        shift and go to state 95
    RPAREN          reduce using rule 97 (empty -> .)
    INT             shift and go to state 64
    FLOAT           shift and go to state 86

    StringOut                      shift and go to state 132
    empty                          shift and go to state 89
    constante_entero               shift and go to state 91
    constante_flotante             shift and go to state 92

state 96

    (43) if_expression -> IF expression_logic paso1IF . THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF
    (44) if_expression -> IF expression_logic paso1IF . THEN if_expression_local paso3IF END_IF

    THEN            shift and go to state 133


state 97

    (75) expression_logic -> expression_logic OR . g
    (77) g -> . g AND ge
    (78) g -> . ge
    (79) ge -> . ID GT ID
    (80) ge -> . ID LT ID
    (81) ge -> . ID GE ID
    (82) ge -> . ID LE ID
    (83) ge -> . ID NE ID
    (84) ge -> . ID EQUAL ID
    (85) ge -> . LPAREN expression_logic RPAREN

    ID              shift and go to state 58
    LPAREN          shift and go to state 59

    g                              shift and go to state 134
    ge                             shift and go to state 57

state 98

    (86) paso1IF -> empty .

    THEN            reduce using rule 86 (paso1IF -> empty .)


state 99

    (77) g -> g AND . ge
    (79) ge -> . ID GT ID
    (80) ge -> . ID LT ID
    (81) ge -> . ID GE ID
    (82) ge -> . ID LE ID
    (83) ge -> . ID NE ID
    (84) ge -> . ID EQUAL ID
    (85) ge -> . LPAREN expression_logic RPAREN

    ID              shift and go to state 58
    LPAREN          shift and go to state 59

    ge                             shift and go to state 135

state 100

    (79) ge -> ID GT . ID

    ID              shift and go to state 136


state 101

    (80) ge -> ID LT . ID

    ID              shift and go to state 137


state 102

    (81) ge -> ID GE . ID

    ID              shift and go to state 138


state 103

    (82) ge -> ID LE . ID

    ID              shift and go to state 139


state 104

    (83) ge -> ID NE . ID

    ID              shift and go to state 140


state 105

    (84) ge -> ID EQUAL . ID

    ID              shift and go to state 141


state 106

    (85) ge -> LPAREN expression_logic . RPAREN
    (75) expression_logic -> expression_logic . OR g

    RPAREN          shift and go to state 142
    OR              shift and go to state 97


state 107

    (30) do_loops -> FOR paso1FOR ASSIGN . expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR
    (63) expression_arith -> . expression_arith PLUS c
    (64) expression_arith -> . expression_arith MINUS c
    (65) expression_arith -> . c
    (66) c -> . c MULTIPLY te
    (67) c -> . c DIVIDE te
    (68) c -> . te
    (69) te -> . ID
    (70) te -> . constante_entero
    (71) te -> . constante_flotante
    (72) te -> . ID LPAREN expression_arith RPAREN
    (73) te -> . ID LPAREN expression_arith COMMA expression_arith RPAREN
    (74) te -> . LPAREN expression_arith RPAREN
    (89) constante_entero -> . INT
    (90) constante_flotante -> . FLOAT

    ID              shift and go to state 79
    LPAREN          shift and go to state 85
    INT             shift and go to state 64
    FLOAT           shift and go to state 86

    expression_arith               shift and go to state 143
    c                              shift and go to state 81
    te                             shift and go to state 82
    constante_entero               shift and go to state 83
    constante_flotante             shift and go to state 84

state 108

    (31) do_loops -> DO constante_entero COMMA . constante_entero COMMA variable_matrix_assign d END_DO
    (89) constante_entero -> . INT

    INT             shift and go to state 64

    constante_entero               shift and go to state 144

state 109

    (32) do_loops -> DO paso1DO LOOP . d WHILE expression_logic END_DO paso2DO
    (21) d -> . b
    (22) d -> . b d
    (23) b -> . variable_matrix_assign
    (24) b -> . printing_variables
    (25) b -> . if_expression
    (26) b -> . do_loops
    (27) b -> . call_subroutine
    (28) b -> . reading_variables
    (29) b -> . EXIT paso4DoExit
    (60) variable_matrix_assign -> . ID ASSIGN expression_arith
    (61) variable_matrix_assign -> . ID LPAREN expression_arith RPAREN ASSIGN expression_arith
    (62) variable_matrix_assign -> . ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith
    (49) printing_variables -> . PRINT Output
    (43) if_expression -> . IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF
    (44) if_expression -> . IF expression_logic paso1IF THEN if_expression_local paso3IF END_IF
    (30) do_loops -> . FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR
    (31) do_loops -> . DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO
    (32) do_loops -> . DO paso1DO LOOP d WHILE expression_logic END_DO paso2DO
    (33) do_loops -> . LOOP paso1DoExit d END_LOOP paso2DoExit paso3DoExit
    (42) call_subroutine -> . CALL ID
    (38) reading_variables -> . READ idrepInput

    EXIT            shift and go to state 31
    ID              shift and go to state 32
    PRINT           shift and go to state 33
    IF              shift and go to state 34
    FOR             shift and go to state 35
    DO              shift and go to state 36
    LOOP            shift and go to state 37
    CALL            shift and go to state 38
    READ            shift and go to state 39

    d                              shift and go to state 145
    b                              shift and go to state 24
    variable_matrix_assign         shift and go to state 25
    printing_variables             shift and go to state 26
    if_expression                  shift and go to state 27
    do_loops                       shift and go to state 28
    call_subroutine                shift and go to state 29
    reading_variables              shift and go to state 30

state 110

    (33) do_loops -> LOOP paso1DoExit d . END_LOOP paso2DoExit paso3DoExit

    END_LOOP        shift and go to state 146


state 111

    (40) idrepInput -> idInput COMMA . idrepInput
    (39) idrepInput -> . idInput
    (40) idrepInput -> . idInput COMMA idrepInput
    (41) idInput -> . ID

    ID              shift and go to state 71

    idInput                        shift and go to state 70
    idrepInput                     shift and go to state 147

state 112

    (6) var_assign -> type_definition COLONS COLONS var_local var_dimensiones create_var_table . var_assign
    (6) var_assign -> . type_definition COLONS COLONS var_local var_dimensiones create_var_table var_assign
    (7) var_assign -> . empty
    (4) type_definition -> . INT_TYPE
    (5) type_definition -> . FLOAT_TYPE
    (97) empty -> .

    INT_TYPE        shift and go to state 9
    FLOAT_TYPE      shift and go to state 10
    SUBROUTINE      reduce using rule 97 (empty -> .)
    BEGIN           reduce using rule 97 (empty -> .)

    type_definition                shift and go to state 7
    var_assign                     shift and go to state 148
    empty                          shift and go to state 8

state 113

    (11) create_var_table -> empty .

    INT_TYPE        reduce using rule 11 (create_var_table -> empty .)
    FLOAT_TYPE      reduce using rule 11 (create_var_table -> empty .)
    SUBROUTINE      reduce using rule 11 (create_var_table -> empty .)
    BEGIN           reduce using rule 11 (create_var_table -> empty .)


state 114

    (8) var_dimensiones -> LARR constante_entero . RARR
    (9) var_dimensiones -> LARR constante_entero . COMMA constante_entero RARR

    RARR            shift and go to state 149
    COMMA           shift and go to state 150


state 115

    (12) var_local -> ID COMMA var_local .

    LARR            reduce using rule 12 (var_local -> ID COMMA var_local .)
    INT_TYPE        reduce using rule 12 (var_local -> ID COMMA var_local .)
    FLOAT_TYPE      reduce using rule 12 (var_local -> ID COMMA var_local .)
    SUBROUTINE      reduce using rule 12 (var_local -> ID COMMA var_local .)
    BEGIN           reduce using rule 12 (var_local -> ID COMMA var_local .)


state 116

    (1) program -> PROGRAM ID primerCuad var_assign subrutinas rellenaCuad a END PROGRAM ID .

    $end            reduce using rule 1 (program -> PROGRAM ID primerCuad var_assign subrutinas rellenaCuad a END PROGRAM ID .)


state 117

    (16) f_local -> SUBROUTINE idSub d crearCuadruploReturn END_SUBROUTINE f_local .

    BEGIN           reduce using rule 16 (f_local -> SUBROUTINE idSub d crearCuadruploReturn END_SUBROUTINE f_local .)


state 118

    (72) te -> ID LPAREN . expression_arith RPAREN
    (73) te -> ID LPAREN . expression_arith COMMA expression_arith RPAREN
    (63) expression_arith -> . expression_arith PLUS c
    (64) expression_arith -> . expression_arith MINUS c
    (65) expression_arith -> . c
    (66) c -> . c MULTIPLY te
    (67) c -> . c DIVIDE te
    (68) c -> . te
    (69) te -> . ID
    (70) te -> . constante_entero
    (71) te -> . constante_flotante
    (72) te -> . ID LPAREN expression_arith RPAREN
    (73) te -> . ID LPAREN expression_arith COMMA expression_arith RPAREN
    (74) te -> . LPAREN expression_arith RPAREN
    (89) constante_entero -> . INT
    (90) constante_flotante -> . FLOAT

    ID              shift and go to state 79
    LPAREN          shift and go to state 85
    INT             shift and go to state 64
    FLOAT           shift and go to state 86

    expression_arith               shift and go to state 151
    c                              shift and go to state 81
    te                             shift and go to state 82
    constante_entero               shift and go to state 83
    constante_flotante             shift and go to state 84

state 119

    (63) expression_arith -> expression_arith PLUS . c
    (66) c -> . c MULTIPLY te
    (67) c -> . c DIVIDE te
    (68) c -> . te
    (69) te -> . ID
    (70) te -> . constante_entero
    (71) te -> . constante_flotante
    (72) te -> . ID LPAREN expression_arith RPAREN
    (73) te -> . ID LPAREN expression_arith COMMA expression_arith RPAREN
    (74) te -> . LPAREN expression_arith RPAREN
    (89) constante_entero -> . INT
    (90) constante_flotante -> . FLOAT

    ID              shift and go to state 79
    LPAREN          shift and go to state 85
    INT             shift and go to state 64
    FLOAT           shift and go to state 86

    c                              shift and go to state 152
    te                             shift and go to state 82
    constante_entero               shift and go to state 83
    constante_flotante             shift and go to state 84

state 120

    (64) expression_arith -> expression_arith MINUS . c
    (66) c -> . c MULTIPLY te
    (67) c -> . c DIVIDE te
    (68) c -> . te
    (69) te -> . ID
    (70) te -> . constante_entero
    (71) te -> . constante_flotante
    (72) te -> . ID LPAREN expression_arith RPAREN
    (73) te -> . ID LPAREN expression_arith COMMA expression_arith RPAREN
    (74) te -> . LPAREN expression_arith RPAREN
    (89) constante_entero -> . INT
    (90) constante_flotante -> . FLOAT

    ID              shift and go to state 79
    LPAREN          shift and go to state 85
    INT             shift and go to state 64
    FLOAT           shift and go to state 86

    c                              shift and go to state 153
    te                             shift and go to state 82
    constante_entero               shift and go to state 83
    constante_flotante             shift and go to state 84

state 121

    (66) c -> c MULTIPLY . te
    (69) te -> . ID
    (70) te -> . constante_entero
    (71) te -> . constante_flotante
    (72) te -> . ID LPAREN expression_arith RPAREN
    (73) te -> . ID LPAREN expression_arith COMMA expression_arith RPAREN
    (74) te -> . LPAREN expression_arith RPAREN
    (89) constante_entero -> . INT
    (90) constante_flotante -> . FLOAT

    ID              shift and go to state 79
    LPAREN          shift and go to state 85
    INT             shift and go to state 64
    FLOAT           shift and go to state 86

    te                             shift and go to state 154
    constante_entero               shift and go to state 83
    constante_flotante             shift and go to state 84

state 122

    (67) c -> c DIVIDE . te
    (69) te -> . ID
    (70) te -> . constante_entero
    (71) te -> . constante_flotante
    (72) te -> . ID LPAREN expression_arith RPAREN
    (73) te -> . ID LPAREN expression_arith COMMA expression_arith RPAREN
    (74) te -> . LPAREN expression_arith RPAREN
    (89) constante_entero -> . INT
    (90) constante_flotante -> . FLOAT

    ID              shift and go to state 79
    LPAREN          shift and go to state 85
    INT             shift and go to state 64
    FLOAT           shift and go to state 86

    te                             shift and go to state 155
    constante_entero               shift and go to state 83
    constante_flotante             shift and go to state 84

state 123

    (74) te -> LPAREN expression_arith . RPAREN
    (63) expression_arith -> expression_arith . PLUS c
    (64) expression_arith -> expression_arith . MINUS c

    RPAREN          shift and go to state 156
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120


state 124

    (61) variable_matrix_assign -> ID LPAREN expression_arith RPAREN . ASSIGN expression_arith

    ASSIGN          shift and go to state 157


state 125

    (62) variable_matrix_assign -> ID LPAREN expression_arith COMMA . expression_arith RPAREN ASSIGN expression_arith
    (63) expression_arith -> . expression_arith PLUS c
    (64) expression_arith -> . expression_arith MINUS c
    (65) expression_arith -> . c
    (66) c -> . c MULTIPLY te
    (67) c -> . c DIVIDE te
    (68) c -> . te
    (69) te -> . ID
    (70) te -> . constante_entero
    (71) te -> . constante_flotante
    (72) te -> . ID LPAREN expression_arith RPAREN
    (73) te -> . ID LPAREN expression_arith COMMA expression_arith RPAREN
    (74) te -> . LPAREN expression_arith RPAREN
    (89) constante_entero -> . INT
    (90) constante_flotante -> . FLOAT

    ID              shift and go to state 79
    LPAREN          shift and go to state 85
    INT             shift and go to state 64
    FLOAT           shift and go to state 86

    expression_arith               shift and go to state 158
    c                              shift and go to state 81
    te                             shift and go to state 82
    constante_entero               shift and go to state 83
    constante_flotante             shift and go to state 84

state 126

    (51) Output -> LPAREN StringOut RPAREN .

    EXIT            reduce using rule 51 (Output -> LPAREN StringOut RPAREN .)
    ID              reduce using rule 51 (Output -> LPAREN StringOut RPAREN .)
    PRINT           reduce using rule 51 (Output -> LPAREN StringOut RPAREN .)
    IF              reduce using rule 51 (Output -> LPAREN StringOut RPAREN .)
    FOR             reduce using rule 51 (Output -> LPAREN StringOut RPAREN .)
    DO              reduce using rule 51 (Output -> LPAREN StringOut RPAREN .)
    LOOP            reduce using rule 51 (Output -> LPAREN StringOut RPAREN .)
    CALL            reduce using rule 51 (Output -> LPAREN StringOut RPAREN .)
    READ            reduce using rule 51 (Output -> LPAREN StringOut RPAREN .)
    END_SUBROUTINE  reduce using rule 51 (Output -> LPAREN StringOut RPAREN .)
    END             reduce using rule 51 (Output -> LPAREN StringOut RPAREN .)
    END_LOOP        reduce using rule 51 (Output -> LPAREN StringOut RPAREN .)
    WHILE           reduce using rule 51 (Output -> LPAREN StringOut RPAREN .)
    ELSIF           reduce using rule 51 (Output -> LPAREN StringOut RPAREN .)
    ELSE            reduce using rule 51 (Output -> LPAREN StringOut RPAREN .)
    END_IF          reduce using rule 51 (Output -> LPAREN StringOut RPAREN .)
    END_DO          reduce using rule 51 (Output -> LPAREN StringOut RPAREN .)
    END_FOR         reduce using rule 51 (Output -> LPAREN StringOut RPAREN .)


state 127

    (53) StringOut -> ID StringOut .

    RPAREN          reduce using rule 53 (StringOut -> ID StringOut .)


state 128

    (54) StringOut -> constante_entero StringOut .

    RPAREN          reduce using rule 54 (StringOut -> constante_entero StringOut .)


state 129

    (55) StringOut -> constante_flotante StringOut .

    RPAREN          reduce using rule 55 (StringOut -> constante_flotante StringOut .)


state 130

    (56) StringOut -> COLONS StringOut .

    RPAREN          reduce using rule 56 (StringOut -> COLONS StringOut .)


state 131

    (57) StringOut -> COMMA StringOut .

    RPAREN          reduce using rule 57 (StringOut -> COMMA StringOut .)


state 132

    (58) StringOut -> QUESTION StringOut .

    RPAREN          reduce using rule 58 (StringOut -> QUESTION StringOut .)


state 133

    (43) if_expression -> IF expression_logic paso1IF THEN . if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF
    (44) if_expression -> IF expression_logic paso1IF THEN . if_expression_local paso3IF END_IF
    (45) if_expression_local -> . d
    (46) if_expression_local -> . empty
    (21) d -> . b
    (22) d -> . b d
    (97) empty -> .
    (23) b -> . variable_matrix_assign
    (24) b -> . printing_variables
    (25) b -> . if_expression
    (26) b -> . do_loops
    (27) b -> . call_subroutine
    (28) b -> . reading_variables
    (29) b -> . EXIT paso4DoExit
    (60) variable_matrix_assign -> . ID ASSIGN expression_arith
    (61) variable_matrix_assign -> . ID LPAREN expression_arith RPAREN ASSIGN expression_arith
    (62) variable_matrix_assign -> . ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith
    (49) printing_variables -> . PRINT Output
    (43) if_expression -> . IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF
    (44) if_expression -> . IF expression_logic paso1IF THEN if_expression_local paso3IF END_IF
    (30) do_loops -> . FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR
    (31) do_loops -> . DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO
    (32) do_loops -> . DO paso1DO LOOP d WHILE expression_logic END_DO paso2DO
    (33) do_loops -> . LOOP paso1DoExit d END_LOOP paso2DoExit paso3DoExit
    (42) call_subroutine -> . CALL ID
    (38) reading_variables -> . READ idrepInput

    ELSIF           reduce using rule 97 (empty -> .)
    ELSE            reduce using rule 97 (empty -> .)
    END_IF          reduce using rule 97 (empty -> .)
    EXIT            shift and go to state 31
    ID              shift and go to state 32
    PRINT           shift and go to state 33
    IF              shift and go to state 34
    FOR             shift and go to state 35
    DO              shift and go to state 36
    LOOP            shift and go to state 37
    CALL            shift and go to state 38
    READ            shift and go to state 39

    if_expression_local            shift and go to state 159
    d                              shift and go to state 160
    empty                          shift and go to state 161
    b                              shift and go to state 24
    variable_matrix_assign         shift and go to state 25
    printing_variables             shift and go to state 26
    if_expression                  shift and go to state 27
    do_loops                       shift and go to state 28
    call_subroutine                shift and go to state 29
    reading_variables              shift and go to state 30

state 134

    (75) expression_logic -> expression_logic OR g .
    (77) g -> g . AND ge

    OR              reduce using rule 75 (expression_logic -> expression_logic OR g .)
    THEN            reduce using rule 75 (expression_logic -> expression_logic OR g .)
    RPAREN          reduce using rule 75 (expression_logic -> expression_logic OR g .)
    END_DO          reduce using rule 75 (expression_logic -> expression_logic OR g .)
    AND             shift and go to state 99


state 135

    (77) g -> g AND ge .

    AND             reduce using rule 77 (g -> g AND ge .)
    OR              reduce using rule 77 (g -> g AND ge .)
    THEN            reduce using rule 77 (g -> g AND ge .)
    RPAREN          reduce using rule 77 (g -> g AND ge .)
    END_DO          reduce using rule 77 (g -> g AND ge .)


state 136

    (79) ge -> ID GT ID .

    AND             reduce using rule 79 (ge -> ID GT ID .)
    OR              reduce using rule 79 (ge -> ID GT ID .)
    THEN            reduce using rule 79 (ge -> ID GT ID .)
    RPAREN          reduce using rule 79 (ge -> ID GT ID .)
    END_DO          reduce using rule 79 (ge -> ID GT ID .)


state 137

    (80) ge -> ID LT ID .

    AND             reduce using rule 80 (ge -> ID LT ID .)
    OR              reduce using rule 80 (ge -> ID LT ID .)
    THEN            reduce using rule 80 (ge -> ID LT ID .)
    RPAREN          reduce using rule 80 (ge -> ID LT ID .)
    END_DO          reduce using rule 80 (ge -> ID LT ID .)


state 138

    (81) ge -> ID GE ID .

    AND             reduce using rule 81 (ge -> ID GE ID .)
    OR              reduce using rule 81 (ge -> ID GE ID .)
    THEN            reduce using rule 81 (ge -> ID GE ID .)
    RPAREN          reduce using rule 81 (ge -> ID GE ID .)
    END_DO          reduce using rule 81 (ge -> ID GE ID .)


state 139

    (82) ge -> ID LE ID .

    AND             reduce using rule 82 (ge -> ID LE ID .)
    OR              reduce using rule 82 (ge -> ID LE ID .)
    THEN            reduce using rule 82 (ge -> ID LE ID .)
    RPAREN          reduce using rule 82 (ge -> ID LE ID .)
    END_DO          reduce using rule 82 (ge -> ID LE ID .)


state 140

    (83) ge -> ID NE ID .

    AND             reduce using rule 83 (ge -> ID NE ID .)
    OR              reduce using rule 83 (ge -> ID NE ID .)
    THEN            reduce using rule 83 (ge -> ID NE ID .)
    RPAREN          reduce using rule 83 (ge -> ID NE ID .)
    END_DO          reduce using rule 83 (ge -> ID NE ID .)


state 141

    (84) ge -> ID EQUAL ID .

    AND             reduce using rule 84 (ge -> ID EQUAL ID .)
    OR              reduce using rule 84 (ge -> ID EQUAL ID .)
    THEN            reduce using rule 84 (ge -> ID EQUAL ID .)
    RPAREN          reduce using rule 84 (ge -> ID EQUAL ID .)
    END_DO          reduce using rule 84 (ge -> ID EQUAL ID .)


state 142

    (85) ge -> LPAREN expression_logic RPAREN .

    AND             reduce using rule 85 (ge -> LPAREN expression_logic RPAREN .)
    OR              reduce using rule 85 (ge -> LPAREN expression_logic RPAREN .)
    THEN            reduce using rule 85 (ge -> LPAREN expression_logic RPAREN .)
    RPAREN          reduce using rule 85 (ge -> LPAREN expression_logic RPAREN .)
    END_DO          reduce using rule 85 (ge -> LPAREN expression_logic RPAREN .)


state 143

    (30) do_loops -> FOR paso1FOR ASSIGN expression_arith . paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR
    (63) expression_arith -> expression_arith . PLUS c
    (64) expression_arith -> expression_arith . MINUS c
    (35) paso2FOR -> . empty
    (97) empty -> .

    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    COMMA           reduce using rule 97 (empty -> .)

    paso2FOR                       shift and go to state 162
    empty                          shift and go to state 163

state 144

    (31) do_loops -> DO constante_entero COMMA constante_entero . COMMA variable_matrix_assign d END_DO

    COMMA           shift and go to state 164


state 145

    (32) do_loops -> DO paso1DO LOOP d . WHILE expression_logic END_DO paso2DO

    WHILE           shift and go to state 165


state 146

    (33) do_loops -> LOOP paso1DoExit d END_LOOP . paso2DoExit paso3DoExit
    (94) paso2DoExit -> . empty
    (97) empty -> .

    EXIT            reduce using rule 97 (empty -> .)
    ID              reduce using rule 97 (empty -> .)
    PRINT           reduce using rule 97 (empty -> .)
    IF              reduce using rule 97 (empty -> .)
    FOR             reduce using rule 97 (empty -> .)
    DO              reduce using rule 97 (empty -> .)
    LOOP            reduce using rule 97 (empty -> .)
    CALL            reduce using rule 97 (empty -> .)
    READ            reduce using rule 97 (empty -> .)
    END_SUBROUTINE  reduce using rule 97 (empty -> .)
    END             reduce using rule 97 (empty -> .)
    END_LOOP        reduce using rule 97 (empty -> .)
    WHILE           reduce using rule 97 (empty -> .)
    ELSIF           reduce using rule 97 (empty -> .)
    ELSE            reduce using rule 97 (empty -> .)
    END_IF          reduce using rule 97 (empty -> .)
    END_DO          reduce using rule 97 (empty -> .)
    END_FOR         reduce using rule 97 (empty -> .)

    paso2DoExit                    shift and go to state 166
    empty                          shift and go to state 167

state 147

    (40) idrepInput -> idInput COMMA idrepInput .

    EXIT            reduce using rule 40 (idrepInput -> idInput COMMA idrepInput .)
    ID              reduce using rule 40 (idrepInput -> idInput COMMA idrepInput .)
    PRINT           reduce using rule 40 (idrepInput -> idInput COMMA idrepInput .)
    IF              reduce using rule 40 (idrepInput -> idInput COMMA idrepInput .)
    FOR             reduce using rule 40 (idrepInput -> idInput COMMA idrepInput .)
    DO              reduce using rule 40 (idrepInput -> idInput COMMA idrepInput .)
    LOOP            reduce using rule 40 (idrepInput -> idInput COMMA idrepInput .)
    CALL            reduce using rule 40 (idrepInput -> idInput COMMA idrepInput .)
    READ            reduce using rule 40 (idrepInput -> idInput COMMA idrepInput .)
    END_SUBROUTINE  reduce using rule 40 (idrepInput -> idInput COMMA idrepInput .)
    END             reduce using rule 40 (idrepInput -> idInput COMMA idrepInput .)
    END_LOOP        reduce using rule 40 (idrepInput -> idInput COMMA idrepInput .)
    WHILE           reduce using rule 40 (idrepInput -> idInput COMMA idrepInput .)
    ELSIF           reduce using rule 40 (idrepInput -> idInput COMMA idrepInput .)
    ELSE            reduce using rule 40 (idrepInput -> idInput COMMA idrepInput .)
    END_IF          reduce using rule 40 (idrepInput -> idInput COMMA idrepInput .)
    END_DO          reduce using rule 40 (idrepInput -> idInput COMMA idrepInput .)
    END_FOR         reduce using rule 40 (idrepInput -> idInput COMMA idrepInput .)


state 148

    (6) var_assign -> type_definition COLONS COLONS var_local var_dimensiones create_var_table var_assign .

    SUBROUTINE      reduce using rule 6 (var_assign -> type_definition COLONS COLONS var_local var_dimensiones create_var_table var_assign .)
    BEGIN           reduce using rule 6 (var_assign -> type_definition COLONS COLONS var_local var_dimensiones create_var_table var_assign .)


state 149

    (8) var_dimensiones -> LARR constante_entero RARR .

    INT_TYPE        reduce using rule 8 (var_dimensiones -> LARR constante_entero RARR .)
    FLOAT_TYPE      reduce using rule 8 (var_dimensiones -> LARR constante_entero RARR .)
    SUBROUTINE      reduce using rule 8 (var_dimensiones -> LARR constante_entero RARR .)
    BEGIN           reduce using rule 8 (var_dimensiones -> LARR constante_entero RARR .)


state 150

    (9) var_dimensiones -> LARR constante_entero COMMA . constante_entero RARR
    (89) constante_entero -> . INT

    INT             shift and go to state 64

    constante_entero               shift and go to state 168

state 151

    (72) te -> ID LPAREN expression_arith . RPAREN
    (73) te -> ID LPAREN expression_arith . COMMA expression_arith RPAREN
    (63) expression_arith -> expression_arith . PLUS c
    (64) expression_arith -> expression_arith . MINUS c

    RPAREN          shift and go to state 169
    COMMA           shift and go to state 170
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120


state 152

    (63) expression_arith -> expression_arith PLUS c .
    (66) c -> c . MULTIPLY te
    (67) c -> c . DIVIDE te

    PLUS            reduce using rule 63 (expression_arith -> expression_arith PLUS c .)
    MINUS           reduce using rule 63 (expression_arith -> expression_arith PLUS c .)
    EXIT            reduce using rule 63 (expression_arith -> expression_arith PLUS c .)
    ID              reduce using rule 63 (expression_arith -> expression_arith PLUS c .)
    PRINT           reduce using rule 63 (expression_arith -> expression_arith PLUS c .)
    IF              reduce using rule 63 (expression_arith -> expression_arith PLUS c .)
    FOR             reduce using rule 63 (expression_arith -> expression_arith PLUS c .)
    DO              reduce using rule 63 (expression_arith -> expression_arith PLUS c .)
    LOOP            reduce using rule 63 (expression_arith -> expression_arith PLUS c .)
    CALL            reduce using rule 63 (expression_arith -> expression_arith PLUS c .)
    READ            reduce using rule 63 (expression_arith -> expression_arith PLUS c .)
    END_SUBROUTINE  reduce using rule 63 (expression_arith -> expression_arith PLUS c .)
    END             reduce using rule 63 (expression_arith -> expression_arith PLUS c .)
    END_LOOP        reduce using rule 63 (expression_arith -> expression_arith PLUS c .)
    WHILE           reduce using rule 63 (expression_arith -> expression_arith PLUS c .)
    ELSIF           reduce using rule 63 (expression_arith -> expression_arith PLUS c .)
    ELSE            reduce using rule 63 (expression_arith -> expression_arith PLUS c .)
    END_IF          reduce using rule 63 (expression_arith -> expression_arith PLUS c .)
    END_DO          reduce using rule 63 (expression_arith -> expression_arith PLUS c .)
    END_FOR         reduce using rule 63 (expression_arith -> expression_arith PLUS c .)
    RPAREN          reduce using rule 63 (expression_arith -> expression_arith PLUS c .)
    COMMA           reduce using rule 63 (expression_arith -> expression_arith PLUS c .)
    MULTIPLY        shift and go to state 121
    DIVIDE          shift and go to state 122


state 153

    (64) expression_arith -> expression_arith MINUS c .
    (66) c -> c . MULTIPLY te
    (67) c -> c . DIVIDE te

    PLUS            reduce using rule 64 (expression_arith -> expression_arith MINUS c .)
    MINUS           reduce using rule 64 (expression_arith -> expression_arith MINUS c .)
    EXIT            reduce using rule 64 (expression_arith -> expression_arith MINUS c .)
    ID              reduce using rule 64 (expression_arith -> expression_arith MINUS c .)
    PRINT           reduce using rule 64 (expression_arith -> expression_arith MINUS c .)
    IF              reduce using rule 64 (expression_arith -> expression_arith MINUS c .)
    FOR             reduce using rule 64 (expression_arith -> expression_arith MINUS c .)
    DO              reduce using rule 64 (expression_arith -> expression_arith MINUS c .)
    LOOP            reduce using rule 64 (expression_arith -> expression_arith MINUS c .)
    CALL            reduce using rule 64 (expression_arith -> expression_arith MINUS c .)
    READ            reduce using rule 64 (expression_arith -> expression_arith MINUS c .)
    END_SUBROUTINE  reduce using rule 64 (expression_arith -> expression_arith MINUS c .)
    END             reduce using rule 64 (expression_arith -> expression_arith MINUS c .)
    END_LOOP        reduce using rule 64 (expression_arith -> expression_arith MINUS c .)
    WHILE           reduce using rule 64 (expression_arith -> expression_arith MINUS c .)
    ELSIF           reduce using rule 64 (expression_arith -> expression_arith MINUS c .)
    ELSE            reduce using rule 64 (expression_arith -> expression_arith MINUS c .)
    END_IF          reduce using rule 64 (expression_arith -> expression_arith MINUS c .)
    END_DO          reduce using rule 64 (expression_arith -> expression_arith MINUS c .)
    END_FOR         reduce using rule 64 (expression_arith -> expression_arith MINUS c .)
    RPAREN          reduce using rule 64 (expression_arith -> expression_arith MINUS c .)
    COMMA           reduce using rule 64 (expression_arith -> expression_arith MINUS c .)
    MULTIPLY        shift and go to state 121
    DIVIDE          shift and go to state 122


state 154

    (66) c -> c MULTIPLY te .

    MULTIPLY        reduce using rule 66 (c -> c MULTIPLY te .)
    DIVIDE          reduce using rule 66 (c -> c MULTIPLY te .)
    PLUS            reduce using rule 66 (c -> c MULTIPLY te .)
    MINUS           reduce using rule 66 (c -> c MULTIPLY te .)
    EXIT            reduce using rule 66 (c -> c MULTIPLY te .)
    ID              reduce using rule 66 (c -> c MULTIPLY te .)
    PRINT           reduce using rule 66 (c -> c MULTIPLY te .)
    IF              reduce using rule 66 (c -> c MULTIPLY te .)
    FOR             reduce using rule 66 (c -> c MULTIPLY te .)
    DO              reduce using rule 66 (c -> c MULTIPLY te .)
    LOOP            reduce using rule 66 (c -> c MULTIPLY te .)
    CALL            reduce using rule 66 (c -> c MULTIPLY te .)
    READ            reduce using rule 66 (c -> c MULTIPLY te .)
    END_SUBROUTINE  reduce using rule 66 (c -> c MULTIPLY te .)
    END             reduce using rule 66 (c -> c MULTIPLY te .)
    END_LOOP        reduce using rule 66 (c -> c MULTIPLY te .)
    WHILE           reduce using rule 66 (c -> c MULTIPLY te .)
    ELSIF           reduce using rule 66 (c -> c MULTIPLY te .)
    ELSE            reduce using rule 66 (c -> c MULTIPLY te .)
    END_IF          reduce using rule 66 (c -> c MULTIPLY te .)
    END_DO          reduce using rule 66 (c -> c MULTIPLY te .)
    END_FOR         reduce using rule 66 (c -> c MULTIPLY te .)
    RPAREN          reduce using rule 66 (c -> c MULTIPLY te .)
    COMMA           reduce using rule 66 (c -> c MULTIPLY te .)


state 155

    (67) c -> c DIVIDE te .

    MULTIPLY        reduce using rule 67 (c -> c DIVIDE te .)
    DIVIDE          reduce using rule 67 (c -> c DIVIDE te .)
    PLUS            reduce using rule 67 (c -> c DIVIDE te .)
    MINUS           reduce using rule 67 (c -> c DIVIDE te .)
    EXIT            reduce using rule 67 (c -> c DIVIDE te .)
    ID              reduce using rule 67 (c -> c DIVIDE te .)
    PRINT           reduce using rule 67 (c -> c DIVIDE te .)
    IF              reduce using rule 67 (c -> c DIVIDE te .)
    FOR             reduce using rule 67 (c -> c DIVIDE te .)
    DO              reduce using rule 67 (c -> c DIVIDE te .)
    LOOP            reduce using rule 67 (c -> c DIVIDE te .)
    CALL            reduce using rule 67 (c -> c DIVIDE te .)
    READ            reduce using rule 67 (c -> c DIVIDE te .)
    END_SUBROUTINE  reduce using rule 67 (c -> c DIVIDE te .)
    END             reduce using rule 67 (c -> c DIVIDE te .)
    END_LOOP        reduce using rule 67 (c -> c DIVIDE te .)
    WHILE           reduce using rule 67 (c -> c DIVIDE te .)
    ELSIF           reduce using rule 67 (c -> c DIVIDE te .)
    ELSE            reduce using rule 67 (c -> c DIVIDE te .)
    END_IF          reduce using rule 67 (c -> c DIVIDE te .)
    END_DO          reduce using rule 67 (c -> c DIVIDE te .)
    END_FOR         reduce using rule 67 (c -> c DIVIDE te .)
    RPAREN          reduce using rule 67 (c -> c DIVIDE te .)
    COMMA           reduce using rule 67 (c -> c DIVIDE te .)


state 156

    (74) te -> LPAREN expression_arith RPAREN .

    MULTIPLY        reduce using rule 74 (te -> LPAREN expression_arith RPAREN .)
    DIVIDE          reduce using rule 74 (te -> LPAREN expression_arith RPAREN .)
    PLUS            reduce using rule 74 (te -> LPAREN expression_arith RPAREN .)
    MINUS           reduce using rule 74 (te -> LPAREN expression_arith RPAREN .)
    EXIT            reduce using rule 74 (te -> LPAREN expression_arith RPAREN .)
    ID              reduce using rule 74 (te -> LPAREN expression_arith RPAREN .)
    PRINT           reduce using rule 74 (te -> LPAREN expression_arith RPAREN .)
    IF              reduce using rule 74 (te -> LPAREN expression_arith RPAREN .)
    FOR             reduce using rule 74 (te -> LPAREN expression_arith RPAREN .)
    DO              reduce using rule 74 (te -> LPAREN expression_arith RPAREN .)
    LOOP            reduce using rule 74 (te -> LPAREN expression_arith RPAREN .)
    CALL            reduce using rule 74 (te -> LPAREN expression_arith RPAREN .)
    READ            reduce using rule 74 (te -> LPAREN expression_arith RPAREN .)
    END_SUBROUTINE  reduce using rule 74 (te -> LPAREN expression_arith RPAREN .)
    END             reduce using rule 74 (te -> LPAREN expression_arith RPAREN .)
    END_LOOP        reduce using rule 74 (te -> LPAREN expression_arith RPAREN .)
    WHILE           reduce using rule 74 (te -> LPAREN expression_arith RPAREN .)
    ELSIF           reduce using rule 74 (te -> LPAREN expression_arith RPAREN .)
    ELSE            reduce using rule 74 (te -> LPAREN expression_arith RPAREN .)
    END_IF          reduce using rule 74 (te -> LPAREN expression_arith RPAREN .)
    END_DO          reduce using rule 74 (te -> LPAREN expression_arith RPAREN .)
    END_FOR         reduce using rule 74 (te -> LPAREN expression_arith RPAREN .)
    RPAREN          reduce using rule 74 (te -> LPAREN expression_arith RPAREN .)
    COMMA           reduce using rule 74 (te -> LPAREN expression_arith RPAREN .)


state 157

    (61) variable_matrix_assign -> ID LPAREN expression_arith RPAREN ASSIGN . expression_arith
    (63) expression_arith -> . expression_arith PLUS c
    (64) expression_arith -> . expression_arith MINUS c
    (65) expression_arith -> . c
    (66) c -> . c MULTIPLY te
    (67) c -> . c DIVIDE te
    (68) c -> . te
    (69) te -> . ID
    (70) te -> . constante_entero
    (71) te -> . constante_flotante
    (72) te -> . ID LPAREN expression_arith RPAREN
    (73) te -> . ID LPAREN expression_arith COMMA expression_arith RPAREN
    (74) te -> . LPAREN expression_arith RPAREN
    (89) constante_entero -> . INT
    (90) constante_flotante -> . FLOAT

    ID              shift and go to state 79
    LPAREN          shift and go to state 85
    INT             shift and go to state 64
    FLOAT           shift and go to state 86

    expression_arith               shift and go to state 171
    c                              shift and go to state 81
    te                             shift and go to state 82
    constante_entero               shift and go to state 83
    constante_flotante             shift and go to state 84

state 158

    (62) variable_matrix_assign -> ID LPAREN expression_arith COMMA expression_arith . RPAREN ASSIGN expression_arith
    (63) expression_arith -> expression_arith . PLUS c
    (64) expression_arith -> expression_arith . MINUS c

    RPAREN          shift and go to state 172
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120


state 159

    (43) if_expression -> IF expression_logic paso1IF THEN if_expression_local . if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF
    (44) if_expression -> IF expression_logic paso1IF THEN if_expression_local . paso3IF END_IF
    (47) if_expression_local2 -> . ELSIF expression_logic THEN if_expression_local if_expression_local2
    (48) if_expression_local2 -> . empty
    (88) paso3IF -> . empty
    (97) empty -> .

    ELSIF           shift and go to state 175
    ELSE            reduce using rule 97 (empty -> .)
    END_IF          reduce using rule 97 (empty -> .)

    if_expression_local2           shift and go to state 173
    paso3IF                        shift and go to state 174
    empty                          shift and go to state 176

state 160

    (45) if_expression_local -> d .

    ELSIF           reduce using rule 45 (if_expression_local -> d .)
    ELSE            reduce using rule 45 (if_expression_local -> d .)
    END_IF          reduce using rule 45 (if_expression_local -> d .)


state 161

    (46) if_expression_local -> empty .

    ELSIF           reduce using rule 46 (if_expression_local -> empty .)
    ELSE            reduce using rule 46 (if_expression_local -> empty .)
    END_IF          reduce using rule 46 (if_expression_local -> empty .)


state 162

    (30) do_loops -> FOR paso1FOR ASSIGN expression_arith paso2FOR . COMMA expression_arith paso3FOR DO d paso4FOR END_FOR

    COMMA           shift and go to state 177


state 163

    (35) paso2FOR -> empty .

    COMMA           reduce using rule 35 (paso2FOR -> empty .)


state 164

    (31) do_loops -> DO constante_entero COMMA constante_entero COMMA . variable_matrix_assign d END_DO
    (60) variable_matrix_assign -> . ID ASSIGN expression_arith
    (61) variable_matrix_assign -> . ID LPAREN expression_arith RPAREN ASSIGN expression_arith
    (62) variable_matrix_assign -> . ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith

    ID              shift and go to state 32

    variable_matrix_assign         shift and go to state 178

state 165

    (32) do_loops -> DO paso1DO LOOP d WHILE . expression_logic END_DO paso2DO
    (75) expression_logic -> . expression_logic OR g
    (76) expression_logic -> . g
    (77) g -> . g AND ge
    (78) g -> . ge
    (79) ge -> . ID GT ID
    (80) ge -> . ID LT ID
    (81) ge -> . ID GE ID
    (82) ge -> . ID LE ID
    (83) ge -> . ID NE ID
    (84) ge -> . ID EQUAL ID
    (85) ge -> . LPAREN expression_logic RPAREN

    ID              shift and go to state 58
    LPAREN          shift and go to state 59

    expression_logic               shift and go to state 179
    g                              shift and go to state 56
    ge                             shift and go to state 57

state 166

    (33) do_loops -> LOOP paso1DoExit d END_LOOP paso2DoExit . paso3DoExit
    (95) paso3DoExit -> . empty
    (97) empty -> .

    EXIT            reduce using rule 97 (empty -> .)
    ID              reduce using rule 97 (empty -> .)
    PRINT           reduce using rule 97 (empty -> .)
    IF              reduce using rule 97 (empty -> .)
    FOR             reduce using rule 97 (empty -> .)
    DO              reduce using rule 97 (empty -> .)
    LOOP            reduce using rule 97 (empty -> .)
    CALL            reduce using rule 97 (empty -> .)
    READ            reduce using rule 97 (empty -> .)
    END_SUBROUTINE  reduce using rule 97 (empty -> .)
    END             reduce using rule 97 (empty -> .)
    END_LOOP        reduce using rule 97 (empty -> .)
    WHILE           reduce using rule 97 (empty -> .)
    ELSIF           reduce using rule 97 (empty -> .)
    ELSE            reduce using rule 97 (empty -> .)
    END_IF          reduce using rule 97 (empty -> .)
    END_DO          reduce using rule 97 (empty -> .)
    END_FOR         reduce using rule 97 (empty -> .)

    paso3DoExit                    shift and go to state 180
    empty                          shift and go to state 181

state 167

    (94) paso2DoExit -> empty .

    EXIT            reduce using rule 94 (paso2DoExit -> empty .)
    ID              reduce using rule 94 (paso2DoExit -> empty .)
    PRINT           reduce using rule 94 (paso2DoExit -> empty .)
    IF              reduce using rule 94 (paso2DoExit -> empty .)
    FOR             reduce using rule 94 (paso2DoExit -> empty .)
    DO              reduce using rule 94 (paso2DoExit -> empty .)
    LOOP            reduce using rule 94 (paso2DoExit -> empty .)
    CALL            reduce using rule 94 (paso2DoExit -> empty .)
    READ            reduce using rule 94 (paso2DoExit -> empty .)
    END_SUBROUTINE  reduce using rule 94 (paso2DoExit -> empty .)
    END             reduce using rule 94 (paso2DoExit -> empty .)
    END_LOOP        reduce using rule 94 (paso2DoExit -> empty .)
    WHILE           reduce using rule 94 (paso2DoExit -> empty .)
    ELSIF           reduce using rule 94 (paso2DoExit -> empty .)
    ELSE            reduce using rule 94 (paso2DoExit -> empty .)
    END_IF          reduce using rule 94 (paso2DoExit -> empty .)
    END_DO          reduce using rule 94 (paso2DoExit -> empty .)
    END_FOR         reduce using rule 94 (paso2DoExit -> empty .)


state 168

    (9) var_dimensiones -> LARR constante_entero COMMA constante_entero . RARR

    RARR            shift and go to state 182


state 169

    (72) te -> ID LPAREN expression_arith RPAREN .

    MULTIPLY        reduce using rule 72 (te -> ID LPAREN expression_arith RPAREN .)
    DIVIDE          reduce using rule 72 (te -> ID LPAREN expression_arith RPAREN .)
    PLUS            reduce using rule 72 (te -> ID LPAREN expression_arith RPAREN .)
    MINUS           reduce using rule 72 (te -> ID LPAREN expression_arith RPAREN .)
    EXIT            reduce using rule 72 (te -> ID LPAREN expression_arith RPAREN .)
    ID              reduce using rule 72 (te -> ID LPAREN expression_arith RPAREN .)
    PRINT           reduce using rule 72 (te -> ID LPAREN expression_arith RPAREN .)
    IF              reduce using rule 72 (te -> ID LPAREN expression_arith RPAREN .)
    FOR             reduce using rule 72 (te -> ID LPAREN expression_arith RPAREN .)
    DO              reduce using rule 72 (te -> ID LPAREN expression_arith RPAREN .)
    LOOP            reduce using rule 72 (te -> ID LPAREN expression_arith RPAREN .)
    CALL            reduce using rule 72 (te -> ID LPAREN expression_arith RPAREN .)
    READ            reduce using rule 72 (te -> ID LPAREN expression_arith RPAREN .)
    END_SUBROUTINE  reduce using rule 72 (te -> ID LPAREN expression_arith RPAREN .)
    END             reduce using rule 72 (te -> ID LPAREN expression_arith RPAREN .)
    END_LOOP        reduce using rule 72 (te -> ID LPAREN expression_arith RPAREN .)
    WHILE           reduce using rule 72 (te -> ID LPAREN expression_arith RPAREN .)
    ELSIF           reduce using rule 72 (te -> ID LPAREN expression_arith RPAREN .)
    ELSE            reduce using rule 72 (te -> ID LPAREN expression_arith RPAREN .)
    END_IF          reduce using rule 72 (te -> ID LPAREN expression_arith RPAREN .)
    END_DO          reduce using rule 72 (te -> ID LPAREN expression_arith RPAREN .)
    END_FOR         reduce using rule 72 (te -> ID LPAREN expression_arith RPAREN .)
    RPAREN          reduce using rule 72 (te -> ID LPAREN expression_arith RPAREN .)
    COMMA           reduce using rule 72 (te -> ID LPAREN expression_arith RPAREN .)


state 170

    (73) te -> ID LPAREN expression_arith COMMA . expression_arith RPAREN
    (63) expression_arith -> . expression_arith PLUS c
    (64) expression_arith -> . expression_arith MINUS c
    (65) expression_arith -> . c
    (66) c -> . c MULTIPLY te
    (67) c -> . c DIVIDE te
    (68) c -> . te
    (69) te -> . ID
    (70) te -> . constante_entero
    (71) te -> . constante_flotante
    (72) te -> . ID LPAREN expression_arith RPAREN
    (73) te -> . ID LPAREN expression_arith COMMA expression_arith RPAREN
    (74) te -> . LPAREN expression_arith RPAREN
    (89) constante_entero -> . INT
    (90) constante_flotante -> . FLOAT

    ID              shift and go to state 79
    LPAREN          shift and go to state 85
    INT             shift and go to state 64
    FLOAT           shift and go to state 86

    expression_arith               shift and go to state 183
    c                              shift and go to state 81
    te                             shift and go to state 82
    constante_entero               shift and go to state 83
    constante_flotante             shift and go to state 84

state 171

    (61) variable_matrix_assign -> ID LPAREN expression_arith RPAREN ASSIGN expression_arith .
    (63) expression_arith -> expression_arith . PLUS c
    (64) expression_arith -> expression_arith . MINUS c

    EXIT            reduce using rule 61 (variable_matrix_assign -> ID LPAREN expression_arith RPAREN ASSIGN expression_arith .)
    ID              reduce using rule 61 (variable_matrix_assign -> ID LPAREN expression_arith RPAREN ASSIGN expression_arith .)
    PRINT           reduce using rule 61 (variable_matrix_assign -> ID LPAREN expression_arith RPAREN ASSIGN expression_arith .)
    IF              reduce using rule 61 (variable_matrix_assign -> ID LPAREN expression_arith RPAREN ASSIGN expression_arith .)
    FOR             reduce using rule 61 (variable_matrix_assign -> ID LPAREN expression_arith RPAREN ASSIGN expression_arith .)
    DO              reduce using rule 61 (variable_matrix_assign -> ID LPAREN expression_arith RPAREN ASSIGN expression_arith .)
    LOOP            reduce using rule 61 (variable_matrix_assign -> ID LPAREN expression_arith RPAREN ASSIGN expression_arith .)
    CALL            reduce using rule 61 (variable_matrix_assign -> ID LPAREN expression_arith RPAREN ASSIGN expression_arith .)
    READ            reduce using rule 61 (variable_matrix_assign -> ID LPAREN expression_arith RPAREN ASSIGN expression_arith .)
    END_SUBROUTINE  reduce using rule 61 (variable_matrix_assign -> ID LPAREN expression_arith RPAREN ASSIGN expression_arith .)
    END             reduce using rule 61 (variable_matrix_assign -> ID LPAREN expression_arith RPAREN ASSIGN expression_arith .)
    END_LOOP        reduce using rule 61 (variable_matrix_assign -> ID LPAREN expression_arith RPAREN ASSIGN expression_arith .)
    WHILE           reduce using rule 61 (variable_matrix_assign -> ID LPAREN expression_arith RPAREN ASSIGN expression_arith .)
    ELSIF           reduce using rule 61 (variable_matrix_assign -> ID LPAREN expression_arith RPAREN ASSIGN expression_arith .)
    ELSE            reduce using rule 61 (variable_matrix_assign -> ID LPAREN expression_arith RPAREN ASSIGN expression_arith .)
    END_IF          reduce using rule 61 (variable_matrix_assign -> ID LPAREN expression_arith RPAREN ASSIGN expression_arith .)
    END_DO          reduce using rule 61 (variable_matrix_assign -> ID LPAREN expression_arith RPAREN ASSIGN expression_arith .)
    END_FOR         reduce using rule 61 (variable_matrix_assign -> ID LPAREN expression_arith RPAREN ASSIGN expression_arith .)
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120


state 172

    (62) variable_matrix_assign -> ID LPAREN expression_arith COMMA expression_arith RPAREN . ASSIGN expression_arith

    ASSIGN          shift and go to state 184


state 173

    (43) if_expression -> IF expression_logic paso1IF THEN if_expression_local if_expression_local2 . paso2IF ELSE if_expression_local paso3IF END_IF
    (87) paso2IF -> . empty
    (97) empty -> .

    ELSE            reduce using rule 97 (empty -> .)

    paso2IF                        shift and go to state 185
    empty                          shift and go to state 186

state 174

    (44) if_expression -> IF expression_logic paso1IF THEN if_expression_local paso3IF . END_IF

    END_IF          shift and go to state 187


state 175

    (47) if_expression_local2 -> ELSIF . expression_logic THEN if_expression_local if_expression_local2
    (75) expression_logic -> . expression_logic OR g
    (76) expression_logic -> . g
    (77) g -> . g AND ge
    (78) g -> . ge
    (79) ge -> . ID GT ID
    (80) ge -> . ID LT ID
    (81) ge -> . ID GE ID
    (82) ge -> . ID LE ID
    (83) ge -> . ID NE ID
    (84) ge -> . ID EQUAL ID
    (85) ge -> . LPAREN expression_logic RPAREN

    ID              shift and go to state 58
    LPAREN          shift and go to state 59

    expression_logic               shift and go to state 188
    g                              shift and go to state 56
    ge                             shift and go to state 57

state 176

    (48) if_expression_local2 -> empty .
    (88) paso3IF -> empty .

    ELSE            reduce using rule 48 (if_expression_local2 -> empty .)
    END_IF          reduce using rule 88 (paso3IF -> empty .)


state 177

    (30) do_loops -> FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA . expression_arith paso3FOR DO d paso4FOR END_FOR
    (63) expression_arith -> . expression_arith PLUS c
    (64) expression_arith -> . expression_arith MINUS c
    (65) expression_arith -> . c
    (66) c -> . c MULTIPLY te
    (67) c -> . c DIVIDE te
    (68) c -> . te
    (69) te -> . ID
    (70) te -> . constante_entero
    (71) te -> . constante_flotante
    (72) te -> . ID LPAREN expression_arith RPAREN
    (73) te -> . ID LPAREN expression_arith COMMA expression_arith RPAREN
    (74) te -> . LPAREN expression_arith RPAREN
    (89) constante_entero -> . INT
    (90) constante_flotante -> . FLOAT

    ID              shift and go to state 79
    LPAREN          shift and go to state 85
    INT             shift and go to state 64
    FLOAT           shift and go to state 86

    expression_arith               shift and go to state 189
    c                              shift and go to state 81
    te                             shift and go to state 82
    constante_entero               shift and go to state 83
    constante_flotante             shift and go to state 84

state 178

    (31) do_loops -> DO constante_entero COMMA constante_entero COMMA variable_matrix_assign . d END_DO
    (21) d -> . b
    (22) d -> . b d
    (23) b -> . variable_matrix_assign
    (24) b -> . printing_variables
    (25) b -> . if_expression
    (26) b -> . do_loops
    (27) b -> . call_subroutine
    (28) b -> . reading_variables
    (29) b -> . EXIT paso4DoExit
    (60) variable_matrix_assign -> . ID ASSIGN expression_arith
    (61) variable_matrix_assign -> . ID LPAREN expression_arith RPAREN ASSIGN expression_arith
    (62) variable_matrix_assign -> . ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith
    (49) printing_variables -> . PRINT Output
    (43) if_expression -> . IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF
    (44) if_expression -> . IF expression_logic paso1IF THEN if_expression_local paso3IF END_IF
    (30) do_loops -> . FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR
    (31) do_loops -> . DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO
    (32) do_loops -> . DO paso1DO LOOP d WHILE expression_logic END_DO paso2DO
    (33) do_loops -> . LOOP paso1DoExit d END_LOOP paso2DoExit paso3DoExit
    (42) call_subroutine -> . CALL ID
    (38) reading_variables -> . READ idrepInput

    EXIT            shift and go to state 31
    ID              shift and go to state 32
    PRINT           shift and go to state 33
    IF              shift and go to state 34
    FOR             shift and go to state 35
    DO              shift and go to state 36
    LOOP            shift and go to state 37
    CALL            shift and go to state 38
    READ            shift and go to state 39

    variable_matrix_assign         shift and go to state 25
    d                              shift and go to state 190
    b                              shift and go to state 24
    printing_variables             shift and go to state 26
    if_expression                  shift and go to state 27
    do_loops                       shift and go to state 28
    call_subroutine                shift and go to state 29
    reading_variables              shift and go to state 30

state 179

    (32) do_loops -> DO paso1DO LOOP d WHILE expression_logic . END_DO paso2DO
    (75) expression_logic -> expression_logic . OR g

    END_DO          shift and go to state 191
    OR              shift and go to state 97


state 180

    (33) do_loops -> LOOP paso1DoExit d END_LOOP paso2DoExit paso3DoExit .

    EXIT            reduce using rule 33 (do_loops -> LOOP paso1DoExit d END_LOOP paso2DoExit paso3DoExit .)
    ID              reduce using rule 33 (do_loops -> LOOP paso1DoExit d END_LOOP paso2DoExit paso3DoExit .)
    PRINT           reduce using rule 33 (do_loops -> LOOP paso1DoExit d END_LOOP paso2DoExit paso3DoExit .)
    IF              reduce using rule 33 (do_loops -> LOOP paso1DoExit d END_LOOP paso2DoExit paso3DoExit .)
    FOR             reduce using rule 33 (do_loops -> LOOP paso1DoExit d END_LOOP paso2DoExit paso3DoExit .)
    DO              reduce using rule 33 (do_loops -> LOOP paso1DoExit d END_LOOP paso2DoExit paso3DoExit .)
    LOOP            reduce using rule 33 (do_loops -> LOOP paso1DoExit d END_LOOP paso2DoExit paso3DoExit .)
    CALL            reduce using rule 33 (do_loops -> LOOP paso1DoExit d END_LOOP paso2DoExit paso3DoExit .)
    READ            reduce using rule 33 (do_loops -> LOOP paso1DoExit d END_LOOP paso2DoExit paso3DoExit .)
    END_SUBROUTINE  reduce using rule 33 (do_loops -> LOOP paso1DoExit d END_LOOP paso2DoExit paso3DoExit .)
    END             reduce using rule 33 (do_loops -> LOOP paso1DoExit d END_LOOP paso2DoExit paso3DoExit .)
    END_LOOP        reduce using rule 33 (do_loops -> LOOP paso1DoExit d END_LOOP paso2DoExit paso3DoExit .)
    WHILE           reduce using rule 33 (do_loops -> LOOP paso1DoExit d END_LOOP paso2DoExit paso3DoExit .)
    ELSIF           reduce using rule 33 (do_loops -> LOOP paso1DoExit d END_LOOP paso2DoExit paso3DoExit .)
    ELSE            reduce using rule 33 (do_loops -> LOOP paso1DoExit d END_LOOP paso2DoExit paso3DoExit .)
    END_IF          reduce using rule 33 (do_loops -> LOOP paso1DoExit d END_LOOP paso2DoExit paso3DoExit .)
    END_DO          reduce using rule 33 (do_loops -> LOOP paso1DoExit d END_LOOP paso2DoExit paso3DoExit .)
    END_FOR         reduce using rule 33 (do_loops -> LOOP paso1DoExit d END_LOOP paso2DoExit paso3DoExit .)


state 181

    (95) paso3DoExit -> empty .

    EXIT            reduce using rule 95 (paso3DoExit -> empty .)
    ID              reduce using rule 95 (paso3DoExit -> empty .)
    PRINT           reduce using rule 95 (paso3DoExit -> empty .)
    IF              reduce using rule 95 (paso3DoExit -> empty .)
    FOR             reduce using rule 95 (paso3DoExit -> empty .)
    DO              reduce using rule 95 (paso3DoExit -> empty .)
    LOOP            reduce using rule 95 (paso3DoExit -> empty .)
    CALL            reduce using rule 95 (paso3DoExit -> empty .)
    READ            reduce using rule 95 (paso3DoExit -> empty .)
    END_SUBROUTINE  reduce using rule 95 (paso3DoExit -> empty .)
    END             reduce using rule 95 (paso3DoExit -> empty .)
    END_LOOP        reduce using rule 95 (paso3DoExit -> empty .)
    WHILE           reduce using rule 95 (paso3DoExit -> empty .)
    ELSIF           reduce using rule 95 (paso3DoExit -> empty .)
    ELSE            reduce using rule 95 (paso3DoExit -> empty .)
    END_IF          reduce using rule 95 (paso3DoExit -> empty .)
    END_DO          reduce using rule 95 (paso3DoExit -> empty .)
    END_FOR         reduce using rule 95 (paso3DoExit -> empty .)


state 182

    (9) var_dimensiones -> LARR constante_entero COMMA constante_entero RARR .

    INT_TYPE        reduce using rule 9 (var_dimensiones -> LARR constante_entero COMMA constante_entero RARR .)
    FLOAT_TYPE      reduce using rule 9 (var_dimensiones -> LARR constante_entero COMMA constante_entero RARR .)
    SUBROUTINE      reduce using rule 9 (var_dimensiones -> LARR constante_entero COMMA constante_entero RARR .)
    BEGIN           reduce using rule 9 (var_dimensiones -> LARR constante_entero COMMA constante_entero RARR .)


state 183

    (73) te -> ID LPAREN expression_arith COMMA expression_arith . RPAREN
    (63) expression_arith -> expression_arith . PLUS c
    (64) expression_arith -> expression_arith . MINUS c

    RPAREN          shift and go to state 192
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120


state 184

    (62) variable_matrix_assign -> ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN . expression_arith
    (63) expression_arith -> . expression_arith PLUS c
    (64) expression_arith -> . expression_arith MINUS c
    (65) expression_arith -> . c
    (66) c -> . c MULTIPLY te
    (67) c -> . c DIVIDE te
    (68) c -> . te
    (69) te -> . ID
    (70) te -> . constante_entero
    (71) te -> . constante_flotante
    (72) te -> . ID LPAREN expression_arith RPAREN
    (73) te -> . ID LPAREN expression_arith COMMA expression_arith RPAREN
    (74) te -> . LPAREN expression_arith RPAREN
    (89) constante_entero -> . INT
    (90) constante_flotante -> . FLOAT

    ID              shift and go to state 79
    LPAREN          shift and go to state 85
    INT             shift and go to state 64
    FLOAT           shift and go to state 86

    expression_arith               shift and go to state 193
    c                              shift and go to state 81
    te                             shift and go to state 82
    constante_entero               shift and go to state 83
    constante_flotante             shift and go to state 84

state 185

    (43) if_expression -> IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF . ELSE if_expression_local paso3IF END_IF

    ELSE            shift and go to state 194


state 186

    (87) paso2IF -> empty .

    ELSE            reduce using rule 87 (paso2IF -> empty .)


state 187

    (44) if_expression -> IF expression_logic paso1IF THEN if_expression_local paso3IF END_IF .

    EXIT            reduce using rule 44 (if_expression -> IF expression_logic paso1IF THEN if_expression_local paso3IF END_IF .)
    ID              reduce using rule 44 (if_expression -> IF expression_logic paso1IF THEN if_expression_local paso3IF END_IF .)
    PRINT           reduce using rule 44 (if_expression -> IF expression_logic paso1IF THEN if_expression_local paso3IF END_IF .)
    IF              reduce using rule 44 (if_expression -> IF expression_logic paso1IF THEN if_expression_local paso3IF END_IF .)
    FOR             reduce using rule 44 (if_expression -> IF expression_logic paso1IF THEN if_expression_local paso3IF END_IF .)
    DO              reduce using rule 44 (if_expression -> IF expression_logic paso1IF THEN if_expression_local paso3IF END_IF .)
    LOOP            reduce using rule 44 (if_expression -> IF expression_logic paso1IF THEN if_expression_local paso3IF END_IF .)
    CALL            reduce using rule 44 (if_expression -> IF expression_logic paso1IF THEN if_expression_local paso3IF END_IF .)
    READ            reduce using rule 44 (if_expression -> IF expression_logic paso1IF THEN if_expression_local paso3IF END_IF .)
    END_SUBROUTINE  reduce using rule 44 (if_expression -> IF expression_logic paso1IF THEN if_expression_local paso3IF END_IF .)
    END             reduce using rule 44 (if_expression -> IF expression_logic paso1IF THEN if_expression_local paso3IF END_IF .)
    END_LOOP        reduce using rule 44 (if_expression -> IF expression_logic paso1IF THEN if_expression_local paso3IF END_IF .)
    WHILE           reduce using rule 44 (if_expression -> IF expression_logic paso1IF THEN if_expression_local paso3IF END_IF .)
    ELSIF           reduce using rule 44 (if_expression -> IF expression_logic paso1IF THEN if_expression_local paso3IF END_IF .)
    ELSE            reduce using rule 44 (if_expression -> IF expression_logic paso1IF THEN if_expression_local paso3IF END_IF .)
    END_IF          reduce using rule 44 (if_expression -> IF expression_logic paso1IF THEN if_expression_local paso3IF END_IF .)
    END_DO          reduce using rule 44 (if_expression -> IF expression_logic paso1IF THEN if_expression_local paso3IF END_IF .)
    END_FOR         reduce using rule 44 (if_expression -> IF expression_logic paso1IF THEN if_expression_local paso3IF END_IF .)


state 188

    (47) if_expression_local2 -> ELSIF expression_logic . THEN if_expression_local if_expression_local2
    (75) expression_logic -> expression_logic . OR g

    THEN            shift and go to state 195
    OR              shift and go to state 97


state 189

    (30) do_loops -> FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith . paso3FOR DO d paso4FOR END_FOR
    (63) expression_arith -> expression_arith . PLUS c
    (64) expression_arith -> expression_arith . MINUS c
    (36) paso3FOR -> . empty
    (97) empty -> .

    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    DO              reduce using rule 97 (empty -> .)

    paso3FOR                       shift and go to state 196
    empty                          shift and go to state 197

state 190

    (31) do_loops -> DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d . END_DO

    END_DO          shift and go to state 198


state 191

    (32) do_loops -> DO paso1DO LOOP d WHILE expression_logic END_DO . paso2DO
    (92) paso2DO -> . empty
    (97) empty -> .

    EXIT            reduce using rule 97 (empty -> .)
    ID              reduce using rule 97 (empty -> .)
    PRINT           reduce using rule 97 (empty -> .)
    IF              reduce using rule 97 (empty -> .)
    FOR             reduce using rule 97 (empty -> .)
    DO              reduce using rule 97 (empty -> .)
    LOOP            reduce using rule 97 (empty -> .)
    CALL            reduce using rule 97 (empty -> .)
    READ            reduce using rule 97 (empty -> .)
    END_SUBROUTINE  reduce using rule 97 (empty -> .)
    END             reduce using rule 97 (empty -> .)
    END_LOOP        reduce using rule 97 (empty -> .)
    WHILE           reduce using rule 97 (empty -> .)
    ELSIF           reduce using rule 97 (empty -> .)
    ELSE            reduce using rule 97 (empty -> .)
    END_IF          reduce using rule 97 (empty -> .)
    END_DO          reduce using rule 97 (empty -> .)
    END_FOR         reduce using rule 97 (empty -> .)

    paso2DO                        shift and go to state 199
    empty                          shift and go to state 200

state 192

    (73) te -> ID LPAREN expression_arith COMMA expression_arith RPAREN .

    MULTIPLY        reduce using rule 73 (te -> ID LPAREN expression_arith COMMA expression_arith RPAREN .)
    DIVIDE          reduce using rule 73 (te -> ID LPAREN expression_arith COMMA expression_arith RPAREN .)
    PLUS            reduce using rule 73 (te -> ID LPAREN expression_arith COMMA expression_arith RPAREN .)
    MINUS           reduce using rule 73 (te -> ID LPAREN expression_arith COMMA expression_arith RPAREN .)
    EXIT            reduce using rule 73 (te -> ID LPAREN expression_arith COMMA expression_arith RPAREN .)
    ID              reduce using rule 73 (te -> ID LPAREN expression_arith COMMA expression_arith RPAREN .)
    PRINT           reduce using rule 73 (te -> ID LPAREN expression_arith COMMA expression_arith RPAREN .)
    IF              reduce using rule 73 (te -> ID LPAREN expression_arith COMMA expression_arith RPAREN .)
    FOR             reduce using rule 73 (te -> ID LPAREN expression_arith COMMA expression_arith RPAREN .)
    DO              reduce using rule 73 (te -> ID LPAREN expression_arith COMMA expression_arith RPAREN .)
    LOOP            reduce using rule 73 (te -> ID LPAREN expression_arith COMMA expression_arith RPAREN .)
    CALL            reduce using rule 73 (te -> ID LPAREN expression_arith COMMA expression_arith RPAREN .)
    READ            reduce using rule 73 (te -> ID LPAREN expression_arith COMMA expression_arith RPAREN .)
    END_SUBROUTINE  reduce using rule 73 (te -> ID LPAREN expression_arith COMMA expression_arith RPAREN .)
    END             reduce using rule 73 (te -> ID LPAREN expression_arith COMMA expression_arith RPAREN .)
    END_LOOP        reduce using rule 73 (te -> ID LPAREN expression_arith COMMA expression_arith RPAREN .)
    WHILE           reduce using rule 73 (te -> ID LPAREN expression_arith COMMA expression_arith RPAREN .)
    ELSIF           reduce using rule 73 (te -> ID LPAREN expression_arith COMMA expression_arith RPAREN .)
    ELSE            reduce using rule 73 (te -> ID LPAREN expression_arith COMMA expression_arith RPAREN .)
    END_IF          reduce using rule 73 (te -> ID LPAREN expression_arith COMMA expression_arith RPAREN .)
    END_DO          reduce using rule 73 (te -> ID LPAREN expression_arith COMMA expression_arith RPAREN .)
    END_FOR         reduce using rule 73 (te -> ID LPAREN expression_arith COMMA expression_arith RPAREN .)
    RPAREN          reduce using rule 73 (te -> ID LPAREN expression_arith COMMA expression_arith RPAREN .)
    COMMA           reduce using rule 73 (te -> ID LPAREN expression_arith COMMA expression_arith RPAREN .)


state 193

    (62) variable_matrix_assign -> ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith .
    (63) expression_arith -> expression_arith . PLUS c
    (64) expression_arith -> expression_arith . MINUS c

    EXIT            reduce using rule 62 (variable_matrix_assign -> ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith .)
    ID              reduce using rule 62 (variable_matrix_assign -> ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith .)
    PRINT           reduce using rule 62 (variable_matrix_assign -> ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith .)
    IF              reduce using rule 62 (variable_matrix_assign -> ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith .)
    FOR             reduce using rule 62 (variable_matrix_assign -> ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith .)
    DO              reduce using rule 62 (variable_matrix_assign -> ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith .)
    LOOP            reduce using rule 62 (variable_matrix_assign -> ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith .)
    CALL            reduce using rule 62 (variable_matrix_assign -> ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith .)
    READ            reduce using rule 62 (variable_matrix_assign -> ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith .)
    END_SUBROUTINE  reduce using rule 62 (variable_matrix_assign -> ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith .)
    END             reduce using rule 62 (variable_matrix_assign -> ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith .)
    END_LOOP        reduce using rule 62 (variable_matrix_assign -> ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith .)
    WHILE           reduce using rule 62 (variable_matrix_assign -> ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith .)
    ELSIF           reduce using rule 62 (variable_matrix_assign -> ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith .)
    ELSE            reduce using rule 62 (variable_matrix_assign -> ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith .)
    END_IF          reduce using rule 62 (variable_matrix_assign -> ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith .)
    END_DO          reduce using rule 62 (variable_matrix_assign -> ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith .)
    END_FOR         reduce using rule 62 (variable_matrix_assign -> ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith .)
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120


state 194

    (43) if_expression -> IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE . if_expression_local paso3IF END_IF
    (45) if_expression_local -> . d
    (46) if_expression_local -> . empty
    (21) d -> . b
    (22) d -> . b d
    (97) empty -> .
    (23) b -> . variable_matrix_assign
    (24) b -> . printing_variables
    (25) b -> . if_expression
    (26) b -> . do_loops
    (27) b -> . call_subroutine
    (28) b -> . reading_variables
    (29) b -> . EXIT paso4DoExit
    (60) variable_matrix_assign -> . ID ASSIGN expression_arith
    (61) variable_matrix_assign -> . ID LPAREN expression_arith RPAREN ASSIGN expression_arith
    (62) variable_matrix_assign -> . ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith
    (49) printing_variables -> . PRINT Output
    (43) if_expression -> . IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF
    (44) if_expression -> . IF expression_logic paso1IF THEN if_expression_local paso3IF END_IF
    (30) do_loops -> . FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR
    (31) do_loops -> . DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO
    (32) do_loops -> . DO paso1DO LOOP d WHILE expression_logic END_DO paso2DO
    (33) do_loops -> . LOOP paso1DoExit d END_LOOP paso2DoExit paso3DoExit
    (42) call_subroutine -> . CALL ID
    (38) reading_variables -> . READ idrepInput

    END_IF          reduce using rule 97 (empty -> .)
    EXIT            shift and go to state 31
    ID              shift and go to state 32
    PRINT           shift and go to state 33
    IF              shift and go to state 34
    FOR             shift and go to state 35
    DO              shift and go to state 36
    LOOP            shift and go to state 37
    CALL            shift and go to state 38
    READ            shift and go to state 39

    if_expression_local            shift and go to state 201
    d                              shift and go to state 160
    empty                          shift and go to state 161
    b                              shift and go to state 24
    variable_matrix_assign         shift and go to state 25
    printing_variables             shift and go to state 26
    if_expression                  shift and go to state 27
    do_loops                       shift and go to state 28
    call_subroutine                shift and go to state 29
    reading_variables              shift and go to state 30

state 195

    (47) if_expression_local2 -> ELSIF expression_logic THEN . if_expression_local if_expression_local2
    (45) if_expression_local -> . d
    (46) if_expression_local -> . empty
    (21) d -> . b
    (22) d -> . b d
    (97) empty -> .
    (23) b -> . variable_matrix_assign
    (24) b -> . printing_variables
    (25) b -> . if_expression
    (26) b -> . do_loops
    (27) b -> . call_subroutine
    (28) b -> . reading_variables
    (29) b -> . EXIT paso4DoExit
    (60) variable_matrix_assign -> . ID ASSIGN expression_arith
    (61) variable_matrix_assign -> . ID LPAREN expression_arith RPAREN ASSIGN expression_arith
    (62) variable_matrix_assign -> . ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith
    (49) printing_variables -> . PRINT Output
    (43) if_expression -> . IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF
    (44) if_expression -> . IF expression_logic paso1IF THEN if_expression_local paso3IF END_IF
    (30) do_loops -> . FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR
    (31) do_loops -> . DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO
    (32) do_loops -> . DO paso1DO LOOP d WHILE expression_logic END_DO paso2DO
    (33) do_loops -> . LOOP paso1DoExit d END_LOOP paso2DoExit paso3DoExit
    (42) call_subroutine -> . CALL ID
    (38) reading_variables -> . READ idrepInput

    ELSIF           reduce using rule 97 (empty -> .)
    ELSE            reduce using rule 97 (empty -> .)
    EXIT            shift and go to state 31
    ID              shift and go to state 32
    PRINT           shift and go to state 33
    IF              shift and go to state 34
    FOR             shift and go to state 35
    DO              shift and go to state 36
    LOOP            shift and go to state 37
    CALL            shift and go to state 38
    READ            shift and go to state 39

    if_expression_local            shift and go to state 202
    d                              shift and go to state 160
    empty                          shift and go to state 161
    b                              shift and go to state 24
    variable_matrix_assign         shift and go to state 25
    printing_variables             shift and go to state 26
    if_expression                  shift and go to state 27
    do_loops                       shift and go to state 28
    call_subroutine                shift and go to state 29
    reading_variables              shift and go to state 30

state 196

    (30) do_loops -> FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR . DO d paso4FOR END_FOR

    DO              shift and go to state 203


state 197

    (36) paso3FOR -> empty .

    DO              reduce using rule 36 (paso3FOR -> empty .)


state 198

    (31) do_loops -> DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO .

    EXIT            reduce using rule 31 (do_loops -> DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO .)
    ID              reduce using rule 31 (do_loops -> DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO .)
    PRINT           reduce using rule 31 (do_loops -> DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO .)
    IF              reduce using rule 31 (do_loops -> DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO .)
    FOR             reduce using rule 31 (do_loops -> DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO .)
    DO              reduce using rule 31 (do_loops -> DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO .)
    LOOP            reduce using rule 31 (do_loops -> DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO .)
    CALL            reduce using rule 31 (do_loops -> DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO .)
    READ            reduce using rule 31 (do_loops -> DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO .)
    END_SUBROUTINE  reduce using rule 31 (do_loops -> DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO .)
    END             reduce using rule 31 (do_loops -> DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO .)
    END_LOOP        reduce using rule 31 (do_loops -> DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO .)
    WHILE           reduce using rule 31 (do_loops -> DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO .)
    ELSIF           reduce using rule 31 (do_loops -> DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO .)
    ELSE            reduce using rule 31 (do_loops -> DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO .)
    END_IF          reduce using rule 31 (do_loops -> DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO .)
    END_DO          reduce using rule 31 (do_loops -> DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO .)
    END_FOR         reduce using rule 31 (do_loops -> DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO .)


state 199

    (32) do_loops -> DO paso1DO LOOP d WHILE expression_logic END_DO paso2DO .

    EXIT            reduce using rule 32 (do_loops -> DO paso1DO LOOP d WHILE expression_logic END_DO paso2DO .)
    ID              reduce using rule 32 (do_loops -> DO paso1DO LOOP d WHILE expression_logic END_DO paso2DO .)
    PRINT           reduce using rule 32 (do_loops -> DO paso1DO LOOP d WHILE expression_logic END_DO paso2DO .)
    IF              reduce using rule 32 (do_loops -> DO paso1DO LOOP d WHILE expression_logic END_DO paso2DO .)
    FOR             reduce using rule 32 (do_loops -> DO paso1DO LOOP d WHILE expression_logic END_DO paso2DO .)
    DO              reduce using rule 32 (do_loops -> DO paso1DO LOOP d WHILE expression_logic END_DO paso2DO .)
    LOOP            reduce using rule 32 (do_loops -> DO paso1DO LOOP d WHILE expression_logic END_DO paso2DO .)
    CALL            reduce using rule 32 (do_loops -> DO paso1DO LOOP d WHILE expression_logic END_DO paso2DO .)
    READ            reduce using rule 32 (do_loops -> DO paso1DO LOOP d WHILE expression_logic END_DO paso2DO .)
    END_SUBROUTINE  reduce using rule 32 (do_loops -> DO paso1DO LOOP d WHILE expression_logic END_DO paso2DO .)
    END             reduce using rule 32 (do_loops -> DO paso1DO LOOP d WHILE expression_logic END_DO paso2DO .)
    END_LOOP        reduce using rule 32 (do_loops -> DO paso1DO LOOP d WHILE expression_logic END_DO paso2DO .)
    WHILE           reduce using rule 32 (do_loops -> DO paso1DO LOOP d WHILE expression_logic END_DO paso2DO .)
    ELSIF           reduce using rule 32 (do_loops -> DO paso1DO LOOP d WHILE expression_logic END_DO paso2DO .)
    ELSE            reduce using rule 32 (do_loops -> DO paso1DO LOOP d WHILE expression_logic END_DO paso2DO .)
    END_IF          reduce using rule 32 (do_loops -> DO paso1DO LOOP d WHILE expression_logic END_DO paso2DO .)
    END_DO          reduce using rule 32 (do_loops -> DO paso1DO LOOP d WHILE expression_logic END_DO paso2DO .)
    END_FOR         reduce using rule 32 (do_loops -> DO paso1DO LOOP d WHILE expression_logic END_DO paso2DO .)


state 200

    (92) paso2DO -> empty .

    EXIT            reduce using rule 92 (paso2DO -> empty .)
    ID              reduce using rule 92 (paso2DO -> empty .)
    PRINT           reduce using rule 92 (paso2DO -> empty .)
    IF              reduce using rule 92 (paso2DO -> empty .)
    FOR             reduce using rule 92 (paso2DO -> empty .)
    DO              reduce using rule 92 (paso2DO -> empty .)
    LOOP            reduce using rule 92 (paso2DO -> empty .)
    CALL            reduce using rule 92 (paso2DO -> empty .)
    READ            reduce using rule 92 (paso2DO -> empty .)
    END_SUBROUTINE  reduce using rule 92 (paso2DO -> empty .)
    END             reduce using rule 92 (paso2DO -> empty .)
    END_LOOP        reduce using rule 92 (paso2DO -> empty .)
    WHILE           reduce using rule 92 (paso2DO -> empty .)
    ELSIF           reduce using rule 92 (paso2DO -> empty .)
    ELSE            reduce using rule 92 (paso2DO -> empty .)
    END_IF          reduce using rule 92 (paso2DO -> empty .)
    END_DO          reduce using rule 92 (paso2DO -> empty .)
    END_FOR         reduce using rule 92 (paso2DO -> empty .)


state 201

    (43) if_expression -> IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local . paso3IF END_IF
    (88) paso3IF -> . empty
    (97) empty -> .

    END_IF          reduce using rule 97 (empty -> .)

    paso3IF                        shift and go to state 204
    empty                          shift and go to state 205

state 202

    (47) if_expression_local2 -> ELSIF expression_logic THEN if_expression_local . if_expression_local2
    (47) if_expression_local2 -> . ELSIF expression_logic THEN if_expression_local if_expression_local2
    (48) if_expression_local2 -> . empty
    (97) empty -> .

    ELSIF           shift and go to state 175
    ELSE            reduce using rule 97 (empty -> .)

    if_expression_local2           shift and go to state 206
    empty                          shift and go to state 207

state 203

    (30) do_loops -> FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO . d paso4FOR END_FOR
    (21) d -> . b
    (22) d -> . b d
    (23) b -> . variable_matrix_assign
    (24) b -> . printing_variables
    (25) b -> . if_expression
    (26) b -> . do_loops
    (27) b -> . call_subroutine
    (28) b -> . reading_variables
    (29) b -> . EXIT paso4DoExit
    (60) variable_matrix_assign -> . ID ASSIGN expression_arith
    (61) variable_matrix_assign -> . ID LPAREN expression_arith RPAREN ASSIGN expression_arith
    (62) variable_matrix_assign -> . ID LPAREN expression_arith COMMA expression_arith RPAREN ASSIGN expression_arith
    (49) printing_variables -> . PRINT Output
    (43) if_expression -> . IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF
    (44) if_expression -> . IF expression_logic paso1IF THEN if_expression_local paso3IF END_IF
    (30) do_loops -> . FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR
    (31) do_loops -> . DO constante_entero COMMA constante_entero COMMA variable_matrix_assign d END_DO
    (32) do_loops -> . DO paso1DO LOOP d WHILE expression_logic END_DO paso2DO
    (33) do_loops -> . LOOP paso1DoExit d END_LOOP paso2DoExit paso3DoExit
    (42) call_subroutine -> . CALL ID
    (38) reading_variables -> . READ idrepInput

    EXIT            shift and go to state 31
    ID              shift and go to state 32
    PRINT           shift and go to state 33
    IF              shift and go to state 34
    FOR             shift and go to state 35
    DO              shift and go to state 36
    LOOP            shift and go to state 37
    CALL            shift and go to state 38
    READ            shift and go to state 39

    d                              shift and go to state 208
    b                              shift and go to state 24
    variable_matrix_assign         shift and go to state 25
    printing_variables             shift and go to state 26
    if_expression                  shift and go to state 27
    do_loops                       shift and go to state 28
    call_subroutine                shift and go to state 29
    reading_variables              shift and go to state 30

state 204

    (43) if_expression -> IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF . END_IF

    END_IF          shift and go to state 209


state 205

    (88) paso3IF -> empty .

    END_IF          reduce using rule 88 (paso3IF -> empty .)


state 206

    (47) if_expression_local2 -> ELSIF expression_logic THEN if_expression_local if_expression_local2 .

    ELSE            reduce using rule 47 (if_expression_local2 -> ELSIF expression_logic THEN if_expression_local if_expression_local2 .)


state 207

    (48) if_expression_local2 -> empty .

    ELSE            reduce using rule 48 (if_expression_local2 -> empty .)


state 208

    (30) do_loops -> FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d . paso4FOR END_FOR
    (37) paso4FOR -> . empty
    (97) empty -> .

    END_FOR         reduce using rule 97 (empty -> .)

    paso4FOR                       shift and go to state 210
    empty                          shift and go to state 211

state 209

    (43) if_expression -> IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF .

    EXIT            reduce using rule 43 (if_expression -> IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF .)
    ID              reduce using rule 43 (if_expression -> IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF .)
    PRINT           reduce using rule 43 (if_expression -> IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF .)
    IF              reduce using rule 43 (if_expression -> IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF .)
    FOR             reduce using rule 43 (if_expression -> IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF .)
    DO              reduce using rule 43 (if_expression -> IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF .)
    LOOP            reduce using rule 43 (if_expression -> IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF .)
    CALL            reduce using rule 43 (if_expression -> IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF .)
    READ            reduce using rule 43 (if_expression -> IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF .)
    END_SUBROUTINE  reduce using rule 43 (if_expression -> IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF .)
    END             reduce using rule 43 (if_expression -> IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF .)
    END_LOOP        reduce using rule 43 (if_expression -> IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF .)
    WHILE           reduce using rule 43 (if_expression -> IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF .)
    ELSIF           reduce using rule 43 (if_expression -> IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF .)
    ELSE            reduce using rule 43 (if_expression -> IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF .)
    END_IF          reduce using rule 43 (if_expression -> IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF .)
    END_DO          reduce using rule 43 (if_expression -> IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF .)
    END_FOR         reduce using rule 43 (if_expression -> IF expression_logic paso1IF THEN if_expression_local if_expression_local2 paso2IF ELSE if_expression_local paso3IF END_IF .)


state 210

    (30) do_loops -> FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR . END_FOR

    END_FOR         shift and go to state 212


state 211

    (37) paso4FOR -> empty .

    END_FOR         reduce using rule 37 (paso4FOR -> empty .)


state 212

    (30) do_loops -> FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR .

    EXIT            reduce using rule 30 (do_loops -> FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR .)
    ID              reduce using rule 30 (do_loops -> FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR .)
    PRINT           reduce using rule 30 (do_loops -> FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR .)
    IF              reduce using rule 30 (do_loops -> FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR .)
    FOR             reduce using rule 30 (do_loops -> FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR .)
    DO              reduce using rule 30 (do_loops -> FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR .)
    LOOP            reduce using rule 30 (do_loops -> FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR .)
    CALL            reduce using rule 30 (do_loops -> FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR .)
    READ            reduce using rule 30 (do_loops -> FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR .)
    END_SUBROUTINE  reduce using rule 30 (do_loops -> FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR .)
    END             reduce using rule 30 (do_loops -> FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR .)
    END_LOOP        reduce using rule 30 (do_loops -> FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR .)
    WHILE           reduce using rule 30 (do_loops -> FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR .)
    ELSIF           reduce using rule 30 (do_loops -> FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR .)
    ELSE            reduce using rule 30 (do_loops -> FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR .)
    END_IF          reduce using rule 30 (do_loops -> FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR .)
    END_DO          reduce using rule 30 (do_loops -> FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR .)
    END_FOR         reduce using rule 30 (do_loops -> FOR paso1FOR ASSIGN expression_arith paso2FOR COMMA expression_arith paso3FOR DO d paso4FOR END_FOR .)

